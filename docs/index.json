{
  "api/IVLab.Plotting.BrushSelectionMode.html": {
    "href": "api/IVLab.Plotting.BrushSelectionMode.html",
    "title": "Class BrushSelectionMode | IVLab 2DPlotting",
    "keywords": "Class BrushSelectionMode A brush-like SelectionMode that asks the current DataPlot it is working on to select any data points that have been brushed over since it was last updated. Inheritance Object SelectionMode BrushSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class BrushSelectionMode : SelectionMode Fields selectionGraphicsParent Parent object that stores selection graphics when they are not in use. Declaration protected Transform selectionGraphicsParent Field Value Type Description Transform Methods EndSelection(Vector2) Finalize the selection by updating it one last time and then deactivating the selection brush. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set reference to the data plot this selection is now acting in, then reset, activate, and determine the starting position of the selection brush before finally calling the current data plot's method to handle brush selection interaction. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the current selection using the distance that the brush has traveled since it was last updated. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.ClickSelectionMode.html": {
    "href": "api/IVLab.Plotting.ClickSelectionMode.html",
    "title": "Class ClickSelectionMode | IVLab 2DPlotting",
    "keywords": "Class ClickSelectionMode A click-based SelectionMode that asks the current DataPlot it is working on to select the nearest data point that lies within the click position. Inheritance Object SelectionMode ClickSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClickSelectionMode : SelectionMode Methods EndSelection(Vector2) End the click selection. This is the same as updating the selection. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set references to the data plot this selection is currently acting in and begin the selection. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the click selection by calling the current data plot's click selection method. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.ClusterDataTable.html": {
    "href": "api/IVLab.Plotting.ClusterDataTable.html",
    "title": "Class ClusterDataTable | IVLab 2DPlotting",
    "keywords": "Class ClusterDataTable Special type of DataTable where each row has an additional identifier to indicate which \"cluster\" that data point is a part of. Inheritance Object DataTable ClusterDataTable Inherited Members DataTable.name DataTable.height DataTable.width DataTable.data DataTable.rowNames DataTable.columnNames DataTable.columnMins DataTable.columnMaxes DataTable.containsNaNs DataTable.Name DataTable.Height DataTable.Width DataTable.RowNames DataTable.ColumnNames DataTable.ColumnMins DataTable.ColumnMaxes DataTable.ContainsNaNs DataTable.LINE_SPLIT_RE DataTable.Data(Int32, Int32) DataTable.InitializeRandomTable(Int32) DataTable.InitializeTableFromCSV(String, Boolean) DataTable.ColumnMin(Int32) DataTable.ColumnMax(Int32) DataTable.IsEmpty() DataTable.ArrayIdx(Int32, Int32) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterDataTable : DataTable Constructors ClusterDataTable() Calls base DataTable() and then initializes clusters. Declaration public ClusterDataTable() ClusterDataTable(Int32) Calls base DataTable(Int32) and then initializes clusters. Declaration public ClusterDataTable(int numDataPoints) Parameters Type Name Description Int32 numDataPoints ClusterDataTable(Single[], String[], String[], String) Calls base DataTable(Single[], String[], String[], String) and then initializes clusters. Declaration public ClusterDataTable(float[] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [] data String [] rowNames String [] columnNames String name ClusterDataTable(Single[][], String[], String[], String) Calls base DataTable(Single[][], String[], String[], String) and then initializes clusters. Declaration public ClusterDataTable(float[][] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [][] data String [] rowNames String [] columnNames String name ClusterDataTable(String, Boolean) Calls base DataTable(String, Boolean) and then initializes clusters. Declaration public ClusterDataTable(string csvFilename, bool csvHasRowNames = true) Parameters Type Name Description String csvFilename Boolean csvHasRowNames Properties Clusters Stores the start index (inclusive) and end index (exclusive) of each cluster in the data table. Declaration public List<(int, int)> Clusters { get; } Property Value Type Description List < (T1, T2) < Int32 , Int32 >> Methods DataIdxToClusterIdx(Int32) Converts a data point index to the index of the cluster that it is a part of. Declaration public int DataIdxToClusterIdx(int i) Parameters Type Name Description Int32 i Data point index. Returns Type Description Int32 Index of cluster that that data point is a part of."
  },
  "api/IVLab.Plotting.ClusterPlot.html": {
    "href": "api/IVLab.Plotting.ClusterPlot.html",
    "title": "Class ClusterPlot | IVLab 2DPlotting",
    "keywords": "Class ClusterPlot An implementation of ScatterPlot that allows data points to be clustered together so that related data can be selected all at once. Inheritance Object DataPlot ScatterPlot ClusterPlot Implements ILinkedData Inherited Members ScatterPlot.pointSize ScatterPlot.scaleToOrigin ScatterPlot.plotParticleSystemPrefab ScatterPlot.axisLabelPrefab ScatterPlot.xDropdown ScatterPlot.yDropdown ScatterPlot.dropdownCanvas ScatterPlot.plotParticlesParent ScatterPlot.axisLabelsParent ScatterPlot.xAxisLabel ScatterPlot.yAxisLabel ScatterPlot.xColumnIdx ScatterPlot.yColumnIdx ScatterPlot.pointPositions ScatterPlot.pointIsNaN ScatterPlot.plotParticleSystem ScatterPlot.pointParticles ScatterPlot.clickedPointIdx ScatterPlot.SetPlotSize() ScatterPlot.RefreshPlotGraphics() ScatterPlot.Plot() ScatterPlot.RectSelection(RectTransform) DataPlot.outerBounds DataPlot.innerBounds DataPlot.padding DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.plotMask DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.dataTable DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.selectedIndexDictionary DataPlot.selectedDataPointIndices DataPlot.selectedDataPointMins DataPlot.selectedDataPointMaxes DataPlot.PlotMask DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.ResizePlot(Vector2) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterPlot : ScatterPlot, ILinkedData Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Vector2 brushDelta SelectionMode.State selectionState Overrides ScatterPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) ClickSelection(Vector2, SelectionMode.State) Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition SelectionMode.State selectionState Overrides ScatterPlot.ClickSelection(Vector2, SelectionMode.State) DropdownSetColumnNames() Declaration protected override void DropdownSetColumnNames() Overrides ScatterPlot.DropdownSetColumnNames() Init(DataPlotManager, Vector2, Int32[]) Initialize the plot by first initializing it as a scatter plot, and then generating the list of clusters using the provided data table. Declaration public override void Init(DataPlotManager dataPlotManager, Vector2 outerBounds, int[] selectedDataPointIndices = null) Parameters Type Name Description DataPlotManager dataPlotManager Manager of the plot: contains reference to the DataManager which controls the DataTable and LinkedIndices that the plot works from. Vector2 outerBounds Size to set the outer bounds of the plot. Int32 [] selectedDataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides ScatterPlot.Init(DataPlotManager, Vector2, Int32[]) UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Updates a specified data point based on its linked index attributes, only if it is already within the selected subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.LinkedAttributes indexAttributes Current attributes of the data point. Overrides ScatterPlot.UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) xDropdownUpdated() Declaration protected override void xDropdownUpdated() Overrides ScatterPlot.xDropdownUpdated() yDropdownUpdated() Declaration protected override void yDropdownUpdated() Overrides ScatterPlot.yDropdownUpdated() Implements ILinkedData"
  },
  "api/IVLab.Plotting.DataManager.html": {
    "href": "api/IVLab.Plotting.DataManager.html",
    "title": "Class DataManager | IVLab 2DPlotting",
    "keywords": "Class DataManager Manages data, primarily by way of loading the DataTable used by the DataPlotManager , and by maintaining a reference to the LinkedIndices related to that data, from which Inheritance Object DataManager Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataManager : MonoBehaviour Properties DataPlotManager Data plot manager this data manager manages data for. Declaration public DataPlotManager DataPlotManager { get; } Property Value Type Description DataPlotManager DataTable Gets the data table this data manager is currently using. Can also be used to set the data table, which automatically causes LinkedIndices to reinitialize and deletes any linked plots. Declaration public DataTable DataTable { get; set; } Property Value Type Description DataTable LinkedData Gets and sets the list of external data linked to this data manager. Declaration public List<LinkedData> LinkedData { get; set; } Property Value Type Description List < LinkedData > LinkedIndices Gets the linked indices associated with the current data table the manager is using. Can also set the linked indices, but the new linked indices must be the same size as the old. Declaration public LinkedIndices LinkedIndices { get; } Property Value Type Description LinkedIndices Masking Toggle for whether or not unhighlighted data should be masked. Declaration public bool Masking { get; set; } Property Value Type Description Boolean MultiDataManager Gets and sets the manager that manages this data manager. Declaration public MultiDataManager MultiDataManager { get; set; } Property Value Type Description MultiDataManager UsingClusterDataTable Whether or not the data table this data manager is pulling data from is a \"cluster\" data table. Declaration public bool UsingClusterDataTable { get; } Property Value Type Description Boolean Methods Init(MultiDataManager, DataPlotManager) Initializes the data manager with the csv file given in the inspector. Declaration public void Init(MultiDataManager manager, DataPlotManager dataPlotManager) Parameters Type Name Description MultiDataManager manager DataPlotManager dataPlotManager Data plot manager for this data manager to control. Remarks Must be called before Init() . Init(MultiDataManager, DataTable, DataPlotManager, List<LinkedData>) Initializes the data manager with a data table, data plot manager and linked data. Declaration public void Init(MultiDataManager manager, DataTable dataTable, DataPlotManager dataPlotManager, List<LinkedData> linkedData = null) Parameters Type Name Description MultiDataManager manager DataTable dataTable Data table for this data manager to use. DataPlotManager dataPlotManager Data plot manager for this data manager to control. List < LinkedData > linkedData Data to be linked with the data table and data plots. Remarks Must be called before Init() . PrintSelectedDataPointNames() Prints the names of all the currently selected data points. Declaration public void PrintSelectedDataPointNames() SaveSelectedDataToCSV(String, Boolean) Saves all the currently selected data points to a new csv. Declaration public void SaveSelectedDataToCSV(string filePath, bool saveRowNames = true) Parameters Type Name Description String filePath Path and name of csv file to save data in. Boolean saveRowNames Whether or not to save a first column with row names. Remarks The csv this method creates can be used to create a data table with only that data! ToggleMasking() Toggles masking of unhighlighted data points. Declaration public void ToggleMasking()"
  },
  "api/IVLab.Plotting.DataPlot.html": {
    "href": "api/IVLab.Plotting.DataPlot.html",
    "title": "Class DataPlot | IVLab 2DPlotting",
    "keywords": "Class DataPlot An abstract class that declares (and defines) variables and methods that are ubiquitous to all data plot implementations, such as plotting, updating, resizing and selection functionalities. Inheritance Object DataPlot ParallelCoordsPlot ScatterPlot Implements ILinkedData Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class DataPlot : MonoBehaviour, ILinkedData Fields brushSelectionRadius Radius of the BrushSelectionMode brush for the plot. Declaration protected float brushSelectionRadius Field Value Type Description Single clickSelectionRadius Radius at which the plot's data points can be selected when in ClickSelectionMode . Declaration protected float clickSelectionRadius Field Value Type Description Single dataTable Reference to the data table that the plot plots data from. Declaration protected DataTable dataTable Field Value Type Description DataTable defaultColor The default color of data points in the plot. Declaration protected Color32 defaultColor Field Value Type Description Color32 deleteButton Button used to delete the plot. Declaration protected GameObject deleteButton Field Value Type Description GameObject highlightedColor The color of highlighted data points in the plot. Declaration protected Color32 highlightedColor Field Value Type Description Color32 innerBounds Dimensions of the plot's inner bounding rect (i.e. the dimensions of the plot itself). Declaration protected Vector2 innerBounds Field Value Type Description Vector2 linkedIndices Reference to the linked indices data structure that contains the current state of all of the data points. Declaration protected LinkedIndices linkedIndices Field Value Type Description LinkedIndices maskedColor The color of masked data points in the plot. Declaration protected Color32 maskedColor Field Value Type Description Color32 outerBounds Declaration protected Vector2 outerBounds Field Value Type Description Vector2 padding Padding between the outer bounding rect and the inner bounding rect. Declaration protected Vector2 padding Field Value Type Description Vector2 plotInnerRect Rect transform that visually makes up the plot's inner bounds. Declaration protected RectTransform plotInnerRect Field Value Type Description RectTransform plotMask Declaration protected RectTransform plotMask Field Value Type Description RectTransform plotOuterRect Rect transform that visually makes up the plot's outer bounds. Declaration protected RectTransform plotOuterRect Field Value Type Description RectTransform plotsCanvas The canvas that all plots are children of. Declaration protected Canvas plotsCanvas Field Value Type Description Canvas plotSelectionRect Slightly enlarged version of the inner bounding rect that makes up the valid selection area of the plot. Generated by taking innerBounds + Vector2.One * selectionPadding . Declaration protected RectTransform plotSelectionRect Field Value Type Description RectTransform selectedDataPointIndices Maps \"selected\" indices (the subset of all data point indices that this plot actually plots) to their actual data point indices in the data table. Declaration protected int[] selectedDataPointIndices Field Value Type Description Int32 [] Remarks For inverse see selectedDataPointIndices . Examples For example, if localIndex was an index from local selected index space, we could convert it to data point space as follows: int dataPointIndex = selectedDataPointIndices[index]; selectedDataPointMaxes Maximum value in each column of the data table for only the selected data points the plot plots. Declaration protected float[] selectedDataPointMaxes Field Value Type Description Single [] selectedDataPointMins Minimum value in each column of the data table for only the selected data points the plot plots. Declaration protected float[] selectedDataPointMins Field Value Type Description Single [] selectedIndexDictionary Maps indices from the complete data point index space (i.e. linked index space) into the local \"selected\" index space of the plot (i.e. the subset of the linked indices that the plot plots). Declaration protected Dictionary<int, int> selectedIndexDictionary Field Value Type Description Dictionary < Int32 , Int32 > Remarks For inverse see selectedDataPointIndices . Examples For example, if index was an index from data point space, we could convert it to local space as follows: if (selectedIndexDictionary.ContainsKey(index)) { int localIndex = selectedIndexDictionary[index]; } selectionPadding Padding between the inner bounding rect and the selection rect. Allows the selection rect to be slightly larger than the plot itself, allowing for more forgiving selection interactions. Declaration protected float selectionPadding Field Value Type Description Single Properties BrushRadius Gets brushSelectionRadius . Declaration public float BrushRadius { get; } Property Value Type Description Single PlotMask Gets plotMask . Declaration public RectTransform PlotMask { get; } Property Value Type Description RectTransform PlotOuterRect Gets plotOuterRect . Declaration public RectTransform PlotOuterRect { get; } Property Value Type Description RectTransform PlotSelectionRect Gets plotSelectionRect . Declaration public RectTransform PlotSelectionRect { get; } Property Value Type Description RectTransform Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Controls the plot's reaction to the BrushSelectionMode . Declaration public abstract void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush in Canvas space. Vector2 brushDelta Change in position from the brush' previous position to its current. SelectionMode.State selectionState Current SelectionMode.State of the selection. ClickSelection(Vector2, SelectionMode.State) Controls the plot's reaction to the ClickSelectionMode . Declaration public abstract void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current mouse/selector position in Canvas space. SelectionMode.State selectionState Current SelectionMode.State of the selection. Init(DataPlotManager, Vector2, Int32[]) Initializes the plot. Ideally called immediately after the plot has been instantiated and before anything else. Declaration public virtual void Init(DataPlotManager dataPlotManager, Vector2 outerBounds, int[] selectedDataPointIndices = null) Parameters Type Name Description DataPlotManager dataPlotManager Manager of the plot: contains reference to the DataManager which controls the DataTable and LinkedIndices that the plot works from. Vector2 outerBounds Size to set the outer bounds of the plot. Int32 [] selectedDataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Plot() Plots the selected data points and refreshes the plot graphics to match. Declaration public abstract void Plot() RectSelection(RectTransform) Controls the plot's reaction to the RectSelectionMode . Declaration public abstract void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Current rect transform of the selection rect. RefreshPlotGraphics() Refreshes the plot graphics to reflect most recent changes to plot data points. Declaration public abstract void RefreshPlotGraphics() Remarks Often called after a series of UpdateDataPoint() calls. ResizePlot(Vector2) Resizes the plot and sets its new size. Declaration public void ResizePlot(Vector2 outerBounds) Parameters Type Name Description Vector2 outerBounds SetPlotSize() Sets the size of the inner, outer, and selection bounds of the plot, along with the plot mask. Declaration protected virtual void SetPlotSize() UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Updates a specific data point according to that data point's current linked index attributes. Declaration public abstract void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.LinkedAttributes indexAttributes Current attributes of the data point. Implements ILinkedData"
  },
  "api/IVLab.Plotting.DataPlotManager.html": {
    "href": "api/IVLab.Plotting.DataPlotManager.html",
    "title": "Class DataPlotManager | IVLab 2DPlotting",
    "keywords": "Class DataPlotManager Manages the visualization and control of multiple DataPlot objects simultaneously. Inheritance Object DataPlotManager Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataPlotManager : MonoBehaviour Properties DataManager Data manager that manages this data plot manager's data, i.e. provides the DataTable and LinkedIndices. Declaration public DataManager DataManager { get; set; } Property Value Type Description DataManager DataPlots Collection of plots that this class manages. Declaration public List<DataPlot> DataPlots { get; } Property Value Type Description List < DataPlot > PlotsParent Gets the parent transform of all of the plots managed by this manager. Declaration public Transform PlotsParent { get; } Property Value Type Description Transform Methods AddPlot(GameObject) Adds a new plot. Declaration public void AddPlot(GameObject dataPlotPrefab) Parameters Type Name Description GameObject dataPlotPrefab Prefab GameObject containing the data plot. AddPlotFromSelected(GameObject) Adds a new plot using only the currently selected data points. Declaration public void AddPlotFromSelected(GameObject dataPlotPrefab) Parameters Type Name Description GameObject dataPlotPrefab Prefab GameObject containing the data plot. DisableSelection() Disables selection so that clicking the mouse has no effect. Declaration public void DisableSelection() EnableSelection() Enables selection so that clicking the mouse once again starts a selection. Declaration public void EnableSelection() Hide() Hides this data plot manager, all of its plot, and unwires the plot creation buttons. Declaration public void Hide() Init() Initializes this plot manager by creating a parent object for all the plots it will control and initializing its plot creations callback. Declaration public void Init() Remarks Must be called after Init(MultiDataManager, DataPlotManager) or Init(MultiDataManager, DataTable, DataPlotManager, List<LinkedData>) . RemovePlot(DataPlot) Removes and destroys the specified plot, if it is being managed by this class. Declaration public void RemovePlot(DataPlot dataPlot) Parameters Type Name Description DataPlot dataPlot Script attached to the data plot GameObject that we wish to remove. SetCurrentSelectionMode(SelectionMode) Sets the current selection mode used by this plot manager. Declaration public void SetCurrentSelectionMode(SelectionMode selectionMode) Parameters Type Name Description SelectionMode selectionMode Show() Shows this data plot manager, all of its plot, and rewires the plot creation buttons. Declaration public void Show()"
  },
  "api/IVLab.Plotting.DataTable.html": {
    "href": "api/IVLab.Plotting.DataTable.html",
    "title": "Class DataTable | IVLab 2DPlotting",
    "keywords": "Class DataTable Column-major order data table that can be initialized from a basic CSV, another data table, or with random data. Inheritance Object DataTable ClusterDataTable Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataTable Constructors DataTable() Default constructor initializes a data table with 10,000 random data points. Declaration public DataTable() DataTable(Int32) Initializes a data table with a specified number of random data points. Declaration public DataTable(int numDataPoints) Parameters Type Name Description Int32 numDataPoints DataTable(Single[], String[], String[], String) Initializes a data table by directly taking a column-major order array of data, along with row and header names. Declaration public DataTable(float[] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [] data COlumn-major order numeric data in array form. String [] rowNames Name of each row of data given, should be the same length as each data column. String [] columnNames Name of each column of data given, should be the same length as each data row. String name DataTable(Single[][], String[], String[], String) Initializes a data table by converting a row-major data matrix to a column-major array, setting additional attributes as it does so. Declaration public DataTable(float[][] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [][] data Row-major order numeric data in matrix form. String [] rowNames Name of each row of data given, should be the same length as each data column. String [] columnNames Name of each column of data given, should be the same length as each data row. String name Remarks Refer to the image at the top of the DataTable page for clarification. DataTable(String, Boolean) Attempts to initialize a data table from the given csv filename, and initializes a random data table instead on failure. Declaration public DataTable(string csvFilename, bool csvHasRowNames = true) Parameters Type Name Description String csvFilename Name of the csv file, excluding .csv. Boolean csvHasRowNames Remarks The csv file should be of the following form: Namely, its first column should be made up of data point names/IDs, its first row should be made up of column names, and the rest should be the actual numeric data values that will make up the table. Fields columnMaxes Declaration protected float[] columnMaxes Field Value Type Description Single [] columnMins Declaration protected float[] columnMins Field Value Type Description Single [] columnNames Declaration protected string[] columnNames Field Value Type Description String [] containsNaNs Declaration protected bool containsNaNs Field Value Type Description Boolean data Declaration protected float[] data Field Value Type Description Single [] height Declaration protected int height Field Value Type Description Int32 LINE_SPLIT_RE Declaration protected string LINE_SPLIT_RE Field Value Type Description String name Declaration protected string name Field Value Type Description String rowNames Declaration protected string[] rowNames Field Value Type Description String [] width Declaration protected int width Field Value Type Description Int32 Properties ColumnMaxes Tracks the maximum value in each column. Declaration public float[] ColumnMaxes { get; } Property Value Type Description Single [] ColumnMins Tracks the minimum value in each column. Declaration public float[] ColumnMins { get; } Property Value Type Description Single [] ColumnNames Name of each column in the data table, excluding the first column (which should be the data point / row ID column). Declaration public string[] ColumnNames { get; } Property Value Type Description String [] ContainsNaNs Whether or not any of the data the table contains is NaN. Declaration public bool ContainsNaNs { get; } Property Value Type Description Boolean Height Height of the data table, also the number of rows. Declaration public int Height { get; } Property Value Type Description Int32 Remarks If data table was created from csv, this does not take into account the header row! Name The name of the data table, usually set to be the name of the csv used. Declaration public string Name { get; set; } Property Value Type Description String RowNames Name of each row in the data table, excluding the first row (which should be the header row). Declaration public string[] RowNames { get; } Property Value Type Description String [] Width Width of the data table, also the number of rows. Declaration public int Width { get; } Property Value Type Description Int32 Remarks If data table was created from csv, this does not take into account the first column! Methods ArrayIdx(Int32, Int32) Converts matrix indices (i, j) to single array accessor index. Declaration protected int ArrayIdx(int i, int j) Parameters Type Name Description Int32 i Int32 j Returns Type Description Int32 ColumnMax(Int32) Returns the max value of a specified column. Declaration public float ColumnMax(int j) Parameters Type Name Description Int32 j Index of the specified column. Returns Type Description Single ColumnMin(Int32) Returns the min value of a specified column. Declaration public float ColumnMin(int j) Parameters Type Name Description Int32 j Index of the specified column. Returns Type Description Single Data(Int32, Int32) Gets the ij'th element of the data stored in the data table. Declaration public float Data(int i, int j) Parameters Type Name Description Int32 i Row index. Int32 j Column index. Returns Type Description Single Data value stored at position ij. InitializeRandomTable(Int32) Initializes a data table of random size populated with random numeric data. Declaration protected void InitializeRandomTable(int dataPointsCount = 10000) Parameters Type Name Description Int32 dataPointsCount Number of data points to add to the random table. InitializeTableFromCSV(String, Boolean) Reads a csv file and loads it into corresponding data table arrays. Declaration protected void InitializeTableFromCSV(string filename, bool csvHasRowNames) Parameters Type Name Description String filename Filename (excluding .csv) of csv file located in Resources folder. Boolean csvHasRowNames Whether or not the first column of the csv is row names. Remarks This is a modified version of the CSVReader written here: https://bravenewmethod.com/2014/09/13/lightweight-csv-reader-for-unity/ . IsEmpty() Whether or not the table is empty. Declaration public bool IsEmpty() Returns Type Description Boolean"
  },
  "api/IVLab.Plotting.html": {
    "href": "api/IVLab.Plotting.html",
    "title": "Namespace IVLab.Plotting | IVLab 2DPlotting",
    "keywords": "Namespace IVLab.Plotting Classes BrushSelectionMode A brush-like SelectionMode that asks the current DataPlot it is working on to select any data points that have been brushed over since it was last updated. ClickSelectionMode A click-based SelectionMode that asks the current DataPlot it is working on to select the nearest data point that lies within the click position. ClusterDataTable Special type of DataTable where each row has an additional identifier to indicate which \"cluster\" that data point is a part of. ClusterPlot An implementation of ScatterPlot that allows data points to be clustered together so that related data can be selected all at once. DataManager Manages data, primarily by way of loading the DataTable used by the DataPlotManager , and by maintaining a reference to the LinkedIndices related to that data, from which DataPlot An abstract class that declares (and defines) variables and methods that are ubiquitous to all data plot implementations, such as plotting, updating, resizing and selection functionalities. DataPlotManager Manages the visualization and control of multiple DataPlot objects simultaneously. DataTable Column-major order data table that can be initialized from a basic CSV, another data table, or with random data. LinkedData Provides definitions for any script that wants to be able to update data in sync with the index space. LinkedIndices This class provides an \"index space\" wherein each index is allowed to have additional attributes/data attached to it, such as whether or not that index (and the data that correlates to it) is highlighted or masked. LinkedIndices.LinkedAttributes This class acts as a container for the attributes attached to each individual index, as used by LinkedIndices . ManagerContainer MultiDataManager Manages multiple data managers, allowing for multiple data tables to be used in the same visualization, each with it's own linked index space and set of data plots. NiceAxisLabel Creates \"nice\" axis labels by taking the min and max values that the axis needs to display and altering them to create an even tick spacing. ParallelCoordsPlot Parallel coordinates plot DataPlot implementation that uses Unity particle systems along with line renderers to efficiently render many data points at once. PlottingUtilities A collection of utilities intended to improve the usability of the 2DPlotting package. RectSelectionMode A rectangular SelectionMode that generates a selection rectangle and asks the current DataPlot it is working on to select any data points that lie within it. ScatterPlot Scatter plot DataPlot implementation that uses Unity's particle system to efficiently render many data points at once. SelectionMode Abstract class which declares variables and methods ubiquitous to all possible selection modes. SplitViewController Basic control over the 2D/3D split camera view. Interfaces ILinkedData Interface for any class that contains data points which need to be updated based on the current linked index space. Enums SelectionMode.State Selection states."
  },
  "api/IVLab.Plotting.ILinkedData.html": {
    "href": "api/IVLab.Plotting.ILinkedData.html",
    "title": "Interface ILinkedData | IVLab 2DPlotting",
    "keywords": "Interface ILinkedData Interface for any class that contains data points which need to be updated based on the current linked index space. Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public interface ILinkedData Methods UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Declaration void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes linkedAttributes) Parameters Type Name Description Int32 index LinkedIndices.LinkedAttributes linkedAttributes"
  },
  "api/IVLab.Plotting.LinkedData.html": {
    "href": "api/IVLab.Plotting.LinkedData.html",
    "title": "Class LinkedData | IVLab 2DPlotting",
    "keywords": "Class LinkedData Provides definitions for any script that wants to be able to update data in sync with the index space. Inheritance Object LinkedData Implements ILinkedData Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class LinkedData : MonoBehaviour, ILinkedData Methods UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Declaration public abstract void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes linkedAttributes) Parameters Type Name Description Int32 index LinkedIndices.LinkedAttributes linkedAttributes Implements ILinkedData"
  },
  "api/IVLab.Plotting.LinkedIndices.html": {
    "href": "api/IVLab.Plotting.LinkedIndices.html",
    "title": "Class LinkedIndices | IVLab 2DPlotting",
    "keywords": "Class LinkedIndices This class provides an \"index space\" wherein each index is allowed to have additional attributes/data attached to it, such as whether or not that index (and the data that correlates to it) is highlighted or masked. Inheritance Object LinkedIndices Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class LinkedIndices Constructors LinkedIndices(Int32) Constructor to initialize linked attributes array. Declaration public LinkedIndices(int size) Parameters Type Name Description Int32 size Number of indices. Properties Item[Int32] Allows attributes to be accessed with array accessor, e.g. linkedIndices[i]. Declaration public LinkedIndices.LinkedAttributes this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description LinkedIndices.LinkedAttributes LinkedAttributesChanged Automatically toggled flag that indicates if any attributes have been changed. Declaration public bool LinkedAttributesChanged { get; set; } Property Value Type Description Boolean Size Total number of indices (and \"data points\"). Declaration public int Size { get; } Property Value Type Description Int32"
  },
  "api/IVLab.Plotting.LinkedIndices.LinkedAttributes.html": {
    "href": "api/IVLab.Plotting.LinkedIndices.LinkedAttributes.html",
    "title": "Class LinkedIndices.LinkedAttributes | IVLab 2DPlotting",
    "keywords": "Class LinkedIndices.LinkedAttributes This class acts as a container for the attributes attached to each individual index, as used by LinkedIndices . Inheritance Object LinkedIndices.LinkedAttributes Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class LinkedAttributes Constructors LinkedAttributes(LinkedIndices) Constructor takes a reference to the LinkedIndices object that holds the array of which this LinkedAtrribute is a part of. Declaration public LinkedAttributes(LinkedIndices linkedIndices) Parameters Type Name Description LinkedIndices linkedIndices Properties Highlighted Flags whether or not this index is highlighted (selected), automatically toggling LinkedAttributeChanged and LinkedAttributesChanged to true if the value is indeed changed. Declaration public bool Highlighted { get; set; } Property Value Type Description Boolean LinkedAttributeChanged A flag that signals whether or not any of the linked attributes have changed. This flag is automatically set to true when an attribute changes, but it must manually be set to false. Declaration public bool LinkedAttributeChanged { get; set; } Property Value Type Description Boolean Examples For example, a common sequence of use for this attribute would occur along the lines of: \"At some point, the 'Highlighted' attribute of linked index i is set to true.\" \"If this attribute was previously false, i.e we are now changing its value, its LinkedAttributeChanged flag will automatically be set to true\" \"In other words, there's no need for us to directly set `linkedIndices[i].LinkedAttributeChanged = true;`\" linkedIndices[i].Highlighted = true; . . . \"Later on, we can choose to work with the linked index attributes of i only if they have changed\" if (linkedIndices[i].LinkedAttributeChanged) { if (linkedIndices[i].Highlighted) { Debug.Log(\"Index \" + i + \" changed to highlighted state.\"); } else { Debug.Log(\"Index \" + i + \" changed to un-highlighted state.\"); } \"We do have to be sure to toggle the flag back to false after we use it, however\" linkedIndices[i].LinkedAttributeChanged = false; } Masked Flags whether or not this index is masked (filtered), automatically toggling LinkedAttributeChanged and LinkedAttributesChanged to true if the value is indeed changed. Declaration public bool Masked { get; set; } Property Value Type Description Boolean"
  },
  "api/IVLab.Plotting.ManagerContainer.html": {
    "href": "api/IVLab.Plotting.ManagerContainer.html",
    "title": "Class ManagerContainer | IVLab 2DPlotting",
    "keywords": "Class ManagerContainer Inheritance Object ManagerContainer Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class ManagerContainer Constructors ManagerContainer(DataManager, DataPlotManager) Declaration public ManagerContainer(DataManager dataManager, DataPlotManager dataPlotManager) Parameters Type Name Description DataManager dataManager DataPlotManager dataPlotManager Fields dataManager Declaration public DataManager dataManager Field Value Type Description DataManager dataPlotManager Declaration public DataPlotManager dataPlotManager Field Value Type Description DataPlotManager"
  },
  "api/IVLab.Plotting.MultiDataManager.html": {
    "href": "api/IVLab.Plotting.MultiDataManager.html",
    "title": "Class MultiDataManager | IVLab 2DPlotting",
    "keywords": "Class MultiDataManager Manages multiple data managers, allowing for multiple data tables to be used in the same visualization, each with it's own linked index space and set of data plots. Inheritance Object MultiDataManager Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class MultiDataManager : MonoBehaviour Methods DecrementFocusedData() Decrements focused data (with wrapping). Declaration public void DecrementFocusedData() FocusData(Int32) Focuses the plotting view on a certain set of data and its related plots. Declaration public void FocusData(int i) Parameters Type Name Description Int32 i Index to data manager that should be focused on. IncrementFocusedData() Increments focused data (with wrapping). Declaration public void IncrementFocusedData() Refocus() Forces a refocus on the current data in order to re-trigger plot manager hide/show methods. Declaration public void Refocus() SetCurrentGlobalSelectionMode(SelectionMode) Sets the selection mode of all of the data plot managers. Declaration public void SetCurrentGlobalSelectionMode(SelectionMode selectionMode) Parameters Type Name Description SelectionMode selectionMode Selection mode all data plot managers will be set to use. UpdateDataDropdown() Updates the data dropdown based on the each of the data managers. Declaration public void UpdateDataDropdown()"
  },
  "api/IVLab.Plotting.NiceAxisLabel.html": {
    "href": "api/IVLab.Plotting.NiceAxisLabel.html",
    "title": "Class NiceAxisLabel | IVLab 2DPlotting",
    "keywords": "Class NiceAxisLabel Creates \"nice\" axis labels by taking the min and max values that the axis needs to display and altering them to create an even tick spacing. Inheritance Object NiceAxisLabel Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class NiceAxisLabel : MonoBehaviour Properties Inverted Declaration public bool Inverted { get; set; } Property Value Type Description Boolean NiceMax Declaration public float NiceMax { get; } Property Value Type Description Single NiceMin Declaration public float NiceMin { get; } Property Value Type Description Single Methods GenerateNiceMinMax(Single, Single) Uses Wilkinson's algorithm (or Heckbert's if Wilkinson's fails) to generate a \"nice\" set of min, max and tick spacing values for the given data range. Declaration public (float, float) GenerateNiceMinMax(float min, float max) Parameters Type Name Description Single min Minimum value in the data range. Single max Maximum value in the data range. Returns Type Description (T1, T2) < Single , Single > Both the adjusted \"nice\" min and the \"nice\" max, in tuple form. Remarks Must be called prior to generating axis labels. GenerateXAxisLabel(Vector2, Vector2, Boolean) Sets the necessary local variables before calling IVLab.Plotting.NiceAxisLabel.GenerateAxisLabel(Vector2,System.Single,System.Boolean) in order to generate the axis labels in the x-direction. Declaration public void GenerateXAxisLabel(Vector2 sourcePos, Vector2 bounds, bool drawGridlines = false) Parameters Type Name Description Vector2 sourcePos Start position of the axis (where the minimum value is located) Vector2 bounds Bounds of the plot. Boolean drawGridlines Whether or not to draw gridlines as part of the axis labels. GenerateYAxisLabel(Vector2, Vector2, Boolean) Sets the necessary local variables before calling IVLab.Plotting.NiceAxisLabel.GenerateAxisLabel(Vector2,System.Single,System.Boolean) in order to generate the axis labels in the y-direction. Declaration public void GenerateYAxisLabel(Vector2 sourcePos, Vector2 bounds, bool drawGridlines = false) Parameters Type Name Description Vector2 sourcePos Start position of the axis (where the minimum value is located) Vector2 bounds Bounds of the plot. Boolean drawGridlines Whether or not to draw gridlines as part of the axis labels."
  },
  "api/IVLab.Plotting.ParallelCoordsPlot.html": {
    "href": "api/IVLab.Plotting.ParallelCoordsPlot.html",
    "title": "Class ParallelCoordsPlot | IVLab 2DPlotting",
    "keywords": "Class ParallelCoordsPlot Parallel coordinates plot DataPlot implementation that uses Unity particle systems along with line renderers to efficiently render many data points at once. Inheritance Object DataPlot ParallelCoordsPlot Implements ILinkedData Inherited Members DataPlot.outerBounds DataPlot.innerBounds DataPlot.padding DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.plotMask DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.dataTable DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.selectedIndexDictionary DataPlot.selectedDataPointIndices DataPlot.selectedDataPointMins DataPlot.selectedDataPointMaxes DataPlot.PlotMask DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.ResizePlot(Vector2) DataPlot.SetPlotSize() Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ParallelCoordsPlot : DataPlot, ILinkedData Fields defaultLineColor The default color of lines in the plot. Declaration protected Color32 defaultLineColor Field Value Type Description Color32 highlightedLineColor The color of highlighted lines in the plot. Declaration protected Color32 highlightedLineColor Field Value Type Description Color32 maskedLineColor The color of masked lines in the plot. Declaration protected Color32 maskedLineColor Field Value Type Description Color32 pointIsNaN Matrix (column-major) of whether or not each point is NaN. Allows for NaN values to be loaded into the data table, but ignored when plotting. Declaration protected bool[][] pointIsNaN Field Value Type Description Boolean [][] Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Selects all the data points that the brush has passed over. Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush. Vector2 brushDelta Change in position from previous to current. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. ClickSelection(Vector2, SelectionMode.State) Selects the point within the point selection radius that is closest to the mouse selection position if the selection state is \"Start\", and otherwise simply checks to see if the initially selected point is still within the point selection radius, highlighting it if it is, unhighlighting it if it is not. Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current selection position. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.ClickSelection(Vector2, SelectionMode.State) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. FlipAxis(Int32) Flips the j'th axis of the plot. Declaration public void FlipAxis(int j) Parameters Type Name Description Int32 j Index into the data table for the column/axis that should be flipped. Init(DataPlotManager, Vector2, Int32[]) Initializes the parallel coords plot by initializing its particle systems, line renderers, axis labeling scripts, and axis-flipping buttons. Declaration public override void Init(DataPlotManager dataPlotManager, Vector2 outerBounds, int[] selectedDataPointIndices = null) Parameters Type Name Description DataPlotManager dataPlotManager Manager of the plot: contains reference to the DataManager which controls the DataTable and LinkedIndices that the plot works from. Vector2 outerBounds Size to set the outer bounds of the plot. Int32 [] selectedDataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides DataPlot.Init(DataPlotManager, Vector2, Int32[]) Plot() Plots only the selected data in the data table, updating all particle systems and line renderers. Declaration public override void Plot() Overrides DataPlot.Plot() RectSelection(RectTransform) Selects all of the data points inside the given selection rectangle. Declaration public override void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Transform of the selection rectangle. Overrides DataPlot.RectSelection(RectTransform) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. RefreshPlotGraphics() Updates the point particle systems to reflect the current state of the data point particles. Declaration public override void RefreshPlotGraphics() Overrides DataPlot.RefreshPlotGraphics() Remarks Usually called after a series of UpdateDataPoint() calls to ensure that those updates are visually reflected. UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Updates a specified data point (which for a parallel coords plot includes multiple point particles and their line renderer) based on its linked index attributes, only if it is already within the selected subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.LinkedAttributes indexAttributes Current attributes of the data point. Overrides DataPlot.UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Implements ILinkedData"
  },
  "api/IVLab.Plotting.PlottingUtilities.html": {
    "href": "api/IVLab.Plotting.PlottingUtilities.html",
    "title": "Class PlottingUtilities | IVLab 2DPlotting",
    "keywords": "Class PlottingUtilities A collection of utilities intended to improve the usability of the 2DPlotting package. Inheritance Object PlottingUtilities Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class PlottingUtilities Methods ConcatenateDataTables(DataTable[], String) Takes an array of data tables and concatenates them into a single \"cluster\" data table which has an additional column identifying the index of the original data table each row came from if possible, returning null if not. Declaration public static ClusterDataTable ConcatenateDataTables(DataTable[] dataTables, string identifierColumnName = \"Cluster\") Parameters Type Name Description DataTable [] dataTables Array of data tables to be concatenated. String identifierColumnName Returns Type Description ClusterDataTable Single concatenated \"cluster\" data table, or null if the tables could not be concatenated."
  },
  "api/IVLab.Plotting.RectSelectionMode.html": {
    "href": "api/IVLab.Plotting.RectSelectionMode.html",
    "title": "Class RectSelectionMode | IVLab 2DPlotting",
    "keywords": "Class RectSelectionMode A rectangular SelectionMode that generates a selection rectangle and asks the current DataPlot it is working on to select any data points that lie within it. Inheritance Object SelectionMode RectSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class RectSelectionMode : SelectionMode Fields selectionGraphicsParent Parent object that stores selection graphics when they are not in use. Declaration protected Transform selectionGraphicsParent Field Value Type Description Transform Methods EndSelection(Vector2) Finalize the selection by updating it one last time and then deactivating the selection rectangle. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set reference to the data plot this selection is now acting in, then reset, activate, and determine the starting position of the selection rectangle. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the size of the selection rectangle and let the current plot select anything within it. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.ScatterPlot.html": {
    "href": "api/IVLab.Plotting.ScatterPlot.html",
    "title": "Class ScatterPlot | IVLab 2DPlotting",
    "keywords": "Class ScatterPlot Scatter plot DataPlot implementation that uses Unity's particle system to efficiently render many data points at once. Inheritance Object DataPlot ScatterPlot ClusterPlot Implements ILinkedData Inherited Members DataPlot.outerBounds DataPlot.innerBounds DataPlot.padding DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.plotMask DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.dataTable DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.selectedIndexDictionary DataPlot.selectedDataPointIndices DataPlot.selectedDataPointMins DataPlot.selectedDataPointMaxes DataPlot.PlotMask DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.ResizePlot(Vector2) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ScatterPlot : DataPlot, ILinkedData Fields axisLabelPrefab Prefab from which axis labels can be instantiated. Declaration protected GameObject axisLabelPrefab Field Value Type Description GameObject axisLabelsParent Parent used to store axes labels in the scene hierarchy. Declaration protected Transform axisLabelsParent Field Value Type Description Transform clickedPointIdx Index into pointPositions array of the point currently selected by the click selection mode. Declaration protected int clickedPointIdx Field Value Type Description Int32 dropdownCanvas Declaration protected Canvas dropdownCanvas Field Value Type Description Canvas plotParticlesParent Declaration protected Transform plotParticlesParent Field Value Type Description Transform plotParticleSystem Particle system instance used to render data points. Declaration protected ParticleSystem plotParticleSystem Field Value Type Description ParticleSystem plotParticleSystemPrefab Declaration protected GameObject plotParticleSystemPrefab Field Value Type Description GameObject pointIsNaN Array of whether or not each point is NaN. Allows for NaN values to be loaded into the data table, but ignored when plotting. Declaration protected bool[] pointIsNaN Field Value Type Description Boolean [] pointParticles Array of particles representing all the points on the plot. Declaration protected ParticleSystem.Particle[] pointParticles Field Value Type Description ParticleSystem.Particle [] pointPositions Array of positions of all the points on the plot. Declaration protected Vector2[] pointPositions Field Value Type Description Vector2 [] pointSize Declaration protected float pointSize Field Value Type Description Single scaleToOrigin Controls whether or not the plot is scaled so that the point (0, 0) is visible. Declaration protected bool scaleToOrigin Field Value Type Description Boolean xAxisLabel Axis label generating scripts. Declaration protected NiceAxisLabel xAxisLabel Field Value Type Description NiceAxisLabel xColumnIdx Indices into data table of currently selected columns that are being compared. Declaration protected int xColumnIdx Field Value Type Description Int32 xDropdown Dropdowns used to select which columns should be compared Declaration protected TMP_Dropdown xDropdown Field Value Type Description TMP_Dropdown yAxisLabel Axis label generating scripts. Declaration protected NiceAxisLabel yAxisLabel Field Value Type Description NiceAxisLabel yColumnIdx Indices into data table of currently selected columns that are being compared. Declaration protected int yColumnIdx Field Value Type Description Int32 yDropdown Dropdowns used to select which columns should be compared Declaration protected TMP_Dropdown yDropdown Field Value Type Description TMP_Dropdown Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Selects all the data points that the brush has passed over. Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush. Vector2 brushDelta Change in position from previous to current. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) ClickSelection(Vector2, SelectionMode.State) Selects the point within the point selection radius that is closest to the mouse selection position if the selection state is \"Start\", and otherwise simply checks to see if the initially selected point is still within the point selection radius, highlighting it if it is, unhighlighting it if it is not. Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current selection position. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.ClickSelection(Vector2, SelectionMode.State) DropdownSetColumnNames() Clears and then adds the column names from the data table to the x and y dropdown menus. Declaration protected virtual void DropdownSetColumnNames() Init(DataPlotManager, Vector2, Int32[]) Initializes the scatter plot by initializing its particle system, axis labeling scripts, and column selection dropdown menus. Declaration public override void Init(DataPlotManager dataPlotManager, Vector2 outerBounds, int[] selectedDataPointIndices = null) Parameters Type Name Description DataPlotManager dataPlotManager Manager of the plot: contains reference to the DataManager which controls the DataTable and LinkedIndices that the plot works from. Vector2 outerBounds Size to set the outer bounds of the plot. Int32 [] selectedDataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides DataPlot.Init(DataPlotManager, Vector2, Int32[]) Plot() Plots only the selected data in the data table based on the two currently selected columns. Declaration public override void Plot() Overrides DataPlot.Plot() RectSelection(RectTransform) Selects all of the data points inside the given selection rectangle. Declaration public override void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Transform of the selection rectangle. Overrides DataPlot.RectSelection(RectTransform) RefreshPlotGraphics() Updates the point particle system to reflect the current state of the data point particles. Declaration public override void RefreshPlotGraphics() Overrides DataPlot.RefreshPlotGraphics() Remarks Usually called after a series of UpdateDataPoint() calls to ensure that those updates are visually reflected. SetPlotSize() Sets the plot size, as well as positioning the dropdown menus. Declaration protected override void SetPlotSize() Overrides DataPlot.SetPlotSize() UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) Updates a specified data point based on its linked index attributes, only if it is already within the selected subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.LinkedAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.LinkedAttributes indexAttributes Current attributes of the data point. Overrides DataPlot.UpdateDataPoint(Int32, LinkedIndices.LinkedAttributes) xDropdownUpdated() Callback to update the currently selected x-column index whenever a new selection is made in the x-axis dropdown, and then replot the plot. Declaration protected virtual void xDropdownUpdated() Remarks Relies on the fact that the \"value\" of a dropdown is also the index of that column in the data table. yDropdownUpdated() Callback to update the currently selected y-column index whenever a new selection is made in the y-axis dropdown, and then replot the plot. Declaration protected virtual void yDropdownUpdated() Remarks Relies on the fact that the \"value\" of a dropdown is also the index of that column in the data table. Implements ILinkedData"
  },
  "api/IVLab.Plotting.SelectionMode.html": {
    "href": "api/IVLab.Plotting.SelectionMode.html",
    "title": "Class SelectionMode | IVLab 2DPlotting",
    "keywords": "Class SelectionMode Abstract class which declares variables and methods ubiquitous to all possible selection modes. Inheritance Object SelectionMode BrushSelectionMode ClickSelectionMode RectSelectionMode Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class SelectionMode : MonoBehaviour Fields currentDataPlot Data plot the selection is currently acting on. Declaration protected DataPlot currentDataPlot Field Value Type Description DataPlot currentPlotRect Rect transform of the current data plot. Declaration protected RectTransform currentPlotRect Field Value Type Description RectTransform plotsCamera Declaration protected Camera plotsCamera Field Value Type Description Camera Methods EndSelection(Vector2) Finalizes the selection based on mouse position. Declaration public abstract void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). StartSelection(DataPlot, Vector2) Grants the selection a reference to the data plot it is acting on, and begins performing the selection. Declaration public abstract void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). UpdateSelection(Vector2) Updates the selection based on mouse position. Declaration public abstract void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition)."
  },
  "api/IVLab.Plotting.SelectionMode.State.html": {
    "href": "api/IVLab.Plotting.SelectionMode.State.html",
    "title": "Enum SelectionMode.State | IVLab 2DPlotting",
    "keywords": "Enum SelectionMode.State Selection states. Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public enum State Fields Name Description End Selection has just ended. Could be used in EndSelection(Vector2) . Start Selection has just started. Could be used in StartSelection(DataPlot, Vector2) . Update Selection is updating. Could be used in UpdateSelection(Vector2) ."
  },
  "api/IVLab.Plotting.SplitViewController.html": {
    "href": "api/IVLab.Plotting.SplitViewController.html",
    "title": "Class SplitViewController | IVLab 2DPlotting",
    "keywords": "Class SplitViewController Basic control over the 2D/3D split camera view. Inheritance Object SplitViewController Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class SplitViewController : MonoBehaviour"
  },
  "index.html": {
    "href": "index.html",
    "title": "2DPlotting-UnityPackage | IVLab 2DPlotting",
    "keywords": "2DPlotting-UnityPackage A Unity package that provides 2D plotting functionality, along with brushing, linking, and filtering between multiple plots and 3D visualizations. Installation in a Unity Project Non-development (read-only) Package use (recommended) In Unity, open Window > Package Manager . Click the + button Select Add package from git URL Paste git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git for the latest package Development use in a git-managed project Navigate your terminal or Git tool into your version-controlled Unity project's main folder. Add this repository as a submodule: cd Packages; git submodule add git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git; git submodule update --init --recursive See https://git-scm.com/book/en/v2/Git-Tools-Submodules for more details on working with Submodules. Development use in a non git-managed project Navigate your terminal or Git tool into your non version-controlled Unity project's main folder. Clone this repository into the Assets folder: cd Packages; git clone git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git Updating the Package If you already have the package installed and want to update to the most recent version: For a non-development package: In Unity, open Window > Package Manager . Click the refresh button at the bottom of the window, and then select Refresh list . Select IVLab 2DPlotting from the list of packages. Click the Update to #.#.# button at the bottom right of the window. If no update button appears, simply follow the non-development installation instructions above. This will be equivalent to updating the package. For a development package: Navigate to the directory in which you have cloned the package. Perform a git pull for the latest release. Note: It's apparently possible for your Unity project's Tags/Sorting Layers/Layers to get mixed up after updating the package, so it's not a bad idea to run through the Setup portion of Getting Started after updating if things appear to be amiss. Getting Started Setup Note: This packages relies on TextMeshPro to display text. If you have not yet imported TextMeshPro, please navigate to Window > TextMeshPro > Import TMP Essential Resources in your Unity project and select Import before using this package. If you forget to do this, the TMP Importer window should appear when you create your first plot, in which case simply be sure to click the Import TMP Essentials button. Once this package is installed following the installation instructions above, it's important that your Unity project's Tags/Sorting Layers/Layers match those used by this package. To ensure that this is the case, navigate to Edit > Project Settings... in your Unity project and select the Tags and Layers tab. Next, click the icon with the two horizontal sliders in the top right corner of the Tags and Layers window, just to the left of the icon with the three vertical dots. From here, simply select the 2DPlotsLayerSetup preset and you should be good to go. Creating Your First Plots Navigate to Packages/IVLab 2DPlotting/Runtime/Prefabs/Grab and Go and drag the Complete Plotting Setup prefab into an empty scene (make sure the scene is truly empty). With the Complete Plotting Setup prefab now in your scene, locate the Default Data Manager GameObject (it exists under Complete Plotting Setup > Data Management > Data Managers in the hierarchy, but can also be found using the search bar). The DataManager script attached to this GameObject will be your main tool for interacting with the package. Two of it's fields you may wish to interact with are: Csv Filename - Change this to the name (excluding \".csv\") of any csv file in your project's Assets/Resources folder (create this folder if you haven't already). This script will construct a data table from the csv with the given name, and then use it to power the data plots. (Note: There are already some example csv files in this package's Runtime/Resources folder. To use one of them, simply input its name into this field, e.g. \"cars\"). Linked Data - Add any additional data that you want to be linked to the main data table here. See 2D/3D Visualization for more details. Once you have selected a csv file to read data from and inputted its name into the \"Csv Filename\" field, play the scene and use the UI to create your plots! 2D/3D Visualization This package readily supports linking between the 2D plots and any related 3D visualization of the data. For context on how this can be achieved, it's recommended that you import the sample scene provided with this package. To do so, navigate back to Window > Package Manager in your Unity project, select IVLab 2DPlotting from the list of packages, and then under the Samples dropdown in the package description window click the Import button next to the sample titled \"2D/3D Vis Example.\" There should now be a folder by the name of Samples inside of Assets , which should have a subfolder (potentially a few levels down) titled 2D_3D Vis Example , which should itself contain a Scenes folder. Open up the scene titled ExampleScene in this folder and you should be setup to experiment with a sample 2D/3D visualization. Feel free to explore this and manipulate GameObjects and scripts as you wish. To get started doing this for you own specific 2D/3D visualization, begin by locating and opening the LinkedData script in this package's Runtime/Scripts/General folder. You'll then want to create a new script that inherits from LinkedData and implements its UpdateDataPoint() method (now may be a good time to return to sample you downloaded and open the LinkedDataExample script in its Scripts folder for an example on how one might do this). Once you have created your own implementation of LinkedData , attach it to a GameObject in the scene, add that GameObject to the \"Linked Data\" field of the Default Data Manager 's DataManager script, and you should be good to go! For clarification on this step, fell free to return to ExampleScene in the sample you may have downloaded to get a sense for how this is all wired together. A Note on Data Tables When creating your first plots after dragging the \"Complete Plotting Setup\" prefab into your scene, it's possible that you'll want to use a data source external to the csv reader provided in the DataTable class. If this is the case, a recommended approach would be as follows: Create a new MonoBehaviour script that has a reference to the Default Data Manager 's DataManager script (e.g. at the top of this script define something like [SerializeField] private DataManager dataManager; and attach the Default Data Manager object to it using the inspector). At some point in this MonoBehaviour (likely the Start() method) initialize your data in whatever way suits your needs (e.g. using your own csv reader, by means of an sql data table, taking data straight from GameObjects in your Unity scene, etc.). Format this data in such a way that this DataTable constructor method will be able to parse it (as suggested in the documentation, refer to the image at the top of the page for clarification). Create the DataTable and assign it to the DataManager , this might look something like: // Initialize a matrix to hold the data in row-major order float[][] data = . . . // Save the row and column names string[] rowNames = . . . string[] columnNames = . . . // Initialize a new data table using the \"external-data\" constructor DataTable dataTable = new DataTable(data, rowNames, columnNames); // Set this DataTable as the table used by the DataManager dataManager.DataTable = dataTable; After dataManager.DataTable = dataTable; has been called, the DataManager will automatically update any plots it manages (indirectly through its DataPlotManager ) to use this new data table, which means you should be all set from here!"
  }
}