{
  "api/IVLab.Plotting.AttributeChangedEvent.html": {
    "href": "api/IVLab.Plotting.AttributeChangedEvent.html",
    "title": "Class AttributeChangedEvent | IVLab 2DPlotting",
    "keywords": "Class AttributeChangedEvent Inheritance Object AttributeChangedEvent Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class AttributeChangedEvent : UnityEvent<int, LinkedIndices.IndexAttributes> Properties ListenerCount Declaration public int ListenerCount { get; } Property Value Type Description Int32 Methods AddListener(UnityAction<Int32, LinkedIndices.IndexAttributes>) Declaration public void AddListener(UnityAction<int, LinkedIndices.IndexAttributes> unityAction) Parameters Type Name Description UnityAction < Int32 , LinkedIndices.IndexAttributes > unityAction RemoveListener(UnityAction<Int32, LinkedIndices.IndexAttributes>) Declaration public void RemoveListener(UnityAction<int, LinkedIndices.IndexAttributes> unityAction) Parameters Type Name Description UnityAction < Int32 , LinkedIndices.IndexAttributes > unityAction"
  },
  "api/IVLab.Plotting.AttributesChangedEvent.html": {
    "href": "api/IVLab.Plotting.AttributesChangedEvent.html",
    "title": "Class AttributesChangedEvent | IVLab 2DPlotting",
    "keywords": "Class AttributesChangedEvent Inheritance Object AttributesChangedEvent Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class AttributesChangedEvent : UnityEvent<List<LinkedIndices.IndexAttributes>> Properties ListenerCount Declaration public int ListenerCount { get; } Property Value Type Description Int32 Methods AddListener(UnityAction<List<LinkedIndices.IndexAttributes>>) Declaration public void AddListener(UnityAction<List<LinkedIndices.IndexAttributes>> unityAction) Parameters Type Name Description UnityAction < List < LinkedIndices.IndexAttributes >> unityAction RemoveListener(UnityAction<List<LinkedIndices.IndexAttributes>>) Declaration public void RemoveListener(UnityAction<List<LinkedIndices.IndexAttributes>> unityAction) Parameters Type Name Description UnityAction < List < LinkedIndices.IndexAttributes >> unityAction"
  },
  "api/IVLab.Plotting.BrushSelectionMode.html": {
    "href": "api/IVLab.Plotting.BrushSelectionMode.html",
    "title": "Class BrushSelectionMode | IVLab 2DPlotting",
    "keywords": "Class BrushSelectionMode A brush-like SelectionMode that asks the current DataPlot it is working on to select any data points that have been brushed over since it was last updated. Inheritance Object SelectionMode BrushSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class BrushSelectionMode : SelectionMode Fields selectionGraphicsParent Parent object that stores selection graphics when they are not in use. Declaration protected Transform selectionGraphicsParent Field Value Type Description Transform Methods EndSelection(Vector2) Finalize the selection by updating it one last time and then deactivating the selection brush. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set reference to the data plot this selection is now acting in, then reset, activate, and determine the starting position of the selection brush before finally calling the current data plot's method to handle brush selection interaction. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the current selection using the distance that the brush has traveled since it was last updated. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.ClickSelectionMode.html": {
    "href": "api/IVLab.Plotting.ClickSelectionMode.html",
    "title": "Class ClickSelectionMode | IVLab 2DPlotting",
    "keywords": "Class ClickSelectionMode A click-based SelectionMode that asks the current DataPlot it is working on to select the nearest data point that lies within the click position. Inheritance Object SelectionMode ClickSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClickSelectionMode : SelectionMode Methods EndSelection(Vector2) End the click selection. This is the same as updating the selection. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set references to the data plot this selection is currently acting in and begin the selection. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the click selection by calling the current data plot's click selection method. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.Cluster.html": {
    "href": "api/IVLab.Plotting.Cluster.html",
    "title": "Class Cluster | IVLab 2DPlotting",
    "keywords": "Class Cluster A collection of (consecutive) data point indices that should be treated as related. Inheritance Object Cluster ClusterPlot.ClusterPlotCluster Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class Cluster Constructors Cluster(Single, Int32, Int32, Color) Constructs a cluster using its id, start index (inclusive), end index (exclusive), and color. Declaration public Cluster(float id, int startIdx, int endIdx, Color color) Parameters Type Name Description Single id Cluster identifier. Int32 startIdx Cluster start index (inclusive). Int32 endIdx Cluster end index (exclusive). Color color Cluster color. Properties Color Cluster color. Declaration public Color Color { get; set; } Property Value Type Description Color Enabled Whether or not this cluster is being masked. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean EndIdx End index of the cluster in the data table (exclusive). Declaration public int EndIdx { get; set; } Property Value Type Description Int32 Id Identifier for this cluster. Declaration public float Id { get; set; } Property Value Type Description Single StartIdx Start index of the cluster in the data table (inclusive). Declaration public int StartIdx { get; set; } Property Value Type Description Int32 Methods Contains(Int32) Returns whether or not the cluster contains a particular index. Declaration public bool Contains(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean"
  },
  "api/IVLab.Plotting.ClusterMaskingToggle.html": {
    "href": "api/IVLab.Plotting.ClusterMaskingToggle.html",
    "title": "Class ClusterMaskingToggle | IVLab 2DPlotting",
    "keywords": "Class ClusterMaskingToggle Inheritance Object MaskingMode ClusterMaskingToggle Inherited Members MaskingMode.toggleKey MaskingMode.linkedIndices MaskingMode.ToggleKey Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterMaskingToggle : MaskingMode Methods ToggleMasking() Basic mask/unmask toggling of unselected points in Scatter, Parallel Coords, and Cluster Plots. Declaration public override void ToggleMasking() Overrides MaskingMode.ToggleMasking()"
  },
  "api/IVLab.Plotting.ClusterPlot.ClusterPlotCluster.html": {
    "href": "api/IVLab.Plotting.ClusterPlot.ClusterPlotCluster.html",
    "title": "Class ClusterPlot.ClusterPlotCluster | IVLab 2DPlotting",
    "keywords": "Class ClusterPlot.ClusterPlotCluster A Cluster implementation that adds some additional attributes specific to the necessities of the ClusterPlot . Inheritance Object Cluster ClusterPlot.ClusterPlotCluster Inherited Members Cluster.Id Cluster.StartIdx Cluster.EndIdx Cluster.Color Cluster.Enabled Cluster.Contains(Int32) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax protected class ClusterPlotCluster : Cluster Constructors ClusterPlotCluster(Cluster) Constructs a cluster using a Cluster . Declaration public ClusterPlotCluster(Cluster cluster) Parameters Type Name Description Cluster cluster Cluster to construct new cluster from. ClusterPlotCluster(Single, Int32, Int32, Color) Constructs a cluster using its id, start index (inclusive), end index (exclusive), and color. Declaration public ClusterPlotCluster(float id, int startIdx, int endIdx, Color color) Parameters Type Name Description Single id Cluster identifier. Int32 startIdx Cluster start index (inclusive). Int32 endIdx Cluster end index (exclusive). Color color Cluster color. Properties Highlighted Whether or not this cluster is currently highlighted. Declaration public bool Highlighted { get; set; } Property Value Type Description Boolean NumSelected Used in brush selection to track the total number of currently selected points within this cluster. Declaration public int NumSelected { get; set; } Property Value Type Description Int32"
  },
  "api/IVLab.Plotting.ClusterPlot.html": {
    "href": "api/IVLab.Plotting.ClusterPlot.html",
    "title": "Class ClusterPlot | IVLab 2DPlotting",
    "keywords": "Class ClusterPlot An implementation of ScatterPlot that allows data points to be clustered together so that related data can be selected all at once. Inheritance Object DataPlot ScatterPlot ClusterPlot Inherited Members ScatterPlot.pointSize ScatterPlot.plotParticleSystemPrefab ScatterPlot.axisLabelPrefab ScatterPlot.xDropdown ScatterPlot.yDropdown ScatterPlot.dropdownCanvas ScatterPlot.plotParticlesParent ScatterPlot.xAxisTitle ScatterPlot.yAxisTitle ScatterPlot.axisLabelsParent ScatterPlot.xAxisLabel ScatterPlot.yAxisLabel ScatterPlot.xColumnIdx ScatterPlot.yColumnIdx ScatterPlot.pointPositions ScatterPlot.defaultPointColors ScatterPlot.pointIsHidden ScatterPlot.plotParticleSystem ScatterPlot.pointParticles ScatterPlot.clickedPointIdx ScatterPlot.axisTitleOffset ScatterPlot.scatterPlotSkin ScatterPlot.SetPlotSize(Vector2) ScatterPlot.RefreshPlotGraphics() ScatterPlot.Plot() ScatterPlot.ApplyColormap(Texture2D, String) ScatterPlot.RemoveColormap() ScatterPlot.SetPlottedColumns(String, String) ScatterPlot.RectSelection(RectTransform) DataPlot.plotSkin DataPlot.outerBounds DataPlot.innerBounds DataPlot.centerOffset DataPlot.scaleAxesToZero DataPlot.padding DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.applyColormap DataPlot.plotMask DataPlot.selectionGraphicsRect DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.dataPointIndexMap DataPlot.plottedDataPointIndices DataPlot.plottedDataPointMins DataPlot.plottedDataPointMaxes DataPlot.OuterBounds DataPlot.InnerBounds DataPlot.SelectionGraphicsRect DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.PlotSkin DataPlot.DeleteButton DataPlot.UpdateAllDataPoints() Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterPlot : ScatterPlot Fields clusterPlotSkin Styling specific to this cluster plot. Declaration protected ClusterPlotSkin clusterPlotSkin Field Value Type Description ClusterPlotSkin clusters List of clusters that this plot manages. Declaration protected ClusterPlot.ClusterPlotCluster[] clusters Field Value Type Description ClusterPlot.ClusterPlotCluster [] tableData Replaces tableData field to ensure that the cluster plot works with a properly formated \"cluster\" data table. Declaration protected ClusterTableData tableData Field Value Type Description ClusterTableData Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Vector2 brushDelta SelectionMode.State selectionState Overrides ScatterPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) ClickSelection(Vector2, SelectionMode.State) Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition SelectionMode.State selectionState Overrides ScatterPlot.ClickSelection(Vector2, SelectionMode.State) DecrementXColumn() Decrements the column displayed on the x-axis and re-plots. Declaration public override void DecrementXColumn() Overrides ScatterPlot.DecrementXColumn() DecrementYColumn() Decrements the column displayed on the y-axis and re-plots. Declaration public override void DecrementYColumn() Overrides ScatterPlot.DecrementYColumn() DropdownSetColumnNames() Declaration protected override void DropdownSetColumnNames() Overrides ScatterPlot.DropdownSetColumnNames() IncrementXColumn() Increments the column displayed on the x-axis and re-plots. Declaration public override void IncrementXColumn() Overrides ScatterPlot.IncrementXColumn() IncrementYColumn() Increments the column displayed on the y-axis and re-plots. Declaration public override void IncrementYColumn() Overrides ScatterPlot.IncrementYColumn() Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Initialize the plot by first initializing it as a scatter plot, and then generating the list of clusters using the provided data table. Declaration public override void Init(DataPlotGroup dataPlotGroup, DataPlotSkin plotSkin, Vector2 plotSize, int[] dataPointIndices = null) Parameters Type Name Description DataPlotGroup dataPlotGroup Group that this plot is a member of. DataPlotSkin plotSkin Styling skin to be applied to this plot. Vector2 plotSize Totale size of the plot. Int32 [] dataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides ScatterPlot.Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) Updates a specified data point based on its linked index attributes, only if it is already within the selected subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.IndexAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.IndexAttributes indexAttributes Current attributes of the data point. Overrides ScatterPlot.UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) xDropdownUpdated() Declaration protected override void xDropdownUpdated() Overrides ScatterPlot.xDropdownUpdated() yDropdownUpdated() Declaration protected override void yDropdownUpdated() Overrides ScatterPlot.yDropdownUpdated()"
  },
  "api/IVLab.Plotting.ClusterPlotManager.html": {
    "href": "api/IVLab.Plotting.ClusterPlotManager.html",
    "title": "Class ClusterPlotManager | IVLab 2DPlotting",
    "keywords": "Class ClusterPlotManager Inheritance Object ClusterPlotManager Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterPlotManager : MonoBehaviour Properties ClusterToggles Gets the cluster toggles created by this plot manager. Declaration public Toggle[] ClusterToggles { get; } Property Value Type Description Toggle [] Methods CreateToggles() Declaration public void CreateToggles() Hide() Declaration public void Hide() Show() Declaration public void Show()"
  },
  "api/IVLab.Plotting.ClusterPlotSkin.html": {
    "href": "api/IVLab.Plotting.ClusterPlotSkin.html",
    "title": "Class ClusterPlotSkin | IVLab 2DPlotting",
    "keywords": "Class ClusterPlotSkin Inheritance Object DataPlotSkin ScatterPlotSkin ClusterPlotSkin Inherited Members ScatterPlotSkin.pointSize DataPlotSkin.plotColor DataPlotSkin.borderColor DataPlotSkin.outlineColor DataPlotSkin.axisLabelTextColor DataPlotSkin.gridlineColor DataPlotSkin.tickMarkColor DataPlotSkin.deleteButtonColor DataPlotSkin.padding DataPlotSkin.scaleAxesToZero DataPlotSkin.defaultColor DataPlotSkin.highlightedColor DataPlotSkin.maskedColor DataPlotSkin.rectSelectionColor DataPlotSkin.rectSelectionOutlineColor DataPlotSkin.brushSelectionColor DataPlotSkin.clickSelectionRadius DataPlotSkin.brushSelectionRadius DataPlotSkin.selectionPadding DataPlotSkin.ApplyOverrideStyling(DataPlotSkin) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterPlotSkin : ScatterPlotSkin"
  },
  "api/IVLab.Plotting.ClusterTableData.html": {
    "href": "api/IVLab.Plotting.ClusterTableData.html",
    "title": "Class ClusterTableData | IVLab 2DPlotting",
    "keywords": "Class ClusterTableData Special type of TableData where each row has an additional identifier to indicate which \"cluster\" that data point is a part of. Inheritance Object TableData ClusterTableData Inherited Members TableData.name TableData.height TableData.width TableData.data TableData.rowNames TableData.columnNames TableData.columnMins TableData.columnMaxes TableData.columnByName TableData.containsNaNs TableData.Name TableData.Height TableData.Width TableData.RowNames TableData.ColumnNames TableData.ColumnMins TableData.ColumnMaxes TableData.ColumnByName TableData.ContainsNaNs TableData.LINE_SPLIT_RE TableData.InitializeRandomTable(Int32) TableData.InitializeTableFromCSV(String, Boolean, Boolean) TableData.ProcessCSV(String, Boolean) TableData.Item[Int32, Int32] TableData.Data(Int32, Int32) TableData.ArrayIdx(Int32, Int32) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ClusterTableData : TableData Constructors ClusterTableData(Color[]) Calls base TableData() and then initializes clusters. Declaration public ClusterTableData(Color[] clusterColors = null) Parameters Type Name Description Color [] clusterColors ClusterTableData(ClusterTableData) Copy constructor. Declaration public ClusterTableData(ClusterTableData clusterTableData) Parameters Type Name Description ClusterTableData clusterTableData ClusterTableData(Int32, Color[]) Calls base TableData(Int32) and then initializes clusters. Declaration public ClusterTableData(int numDataPoints, Color[] clusterColors = null) Parameters Type Name Description Int32 numDataPoints Color [] clusterColors ClusterTableData(Single[], String[], String[], String, Color[]) Calls base TableData(Single[], String[], String[], String) and then initializes clusters. Declaration public ClusterTableData(float[] data, string[] rowNames, string[] columnNames, string name = \"foo\", Color[] clusterColors = null) Parameters Type Name Description Single [] data String [] rowNames String [] columnNames String name Color [] clusterColors ClusterTableData(Single[][], String[], String[], String, Color[]) Calls base TableData(Single[][], String[], String[], String) and then initializes clusters. Declaration public ClusterTableData(float[][] data, string[] rowNames, string[] columnNames, string name = \"foo\", Color[] clusterColors = null) Parameters Type Name Description Single [][] data String [] rowNames String [] columnNames String name Color [] clusterColors ClusterTableData(String, Boolean, Boolean, Color[]) Calls base TableData(String, Boolean, Boolean) and then initializes clusters. Declaration public ClusterTableData(string csvFilename, bool csvHasRowNames = true, bool loadFromResources = true, Color[] clusterColors = null) Parameters Type Name Description String csvFilename Boolean csvHasRowNames Boolean loadFromResources Color [] clusterColors Properties Clusters Stores the id, start index (inclusive), end index (exclusive) and color of each cluster in the data table. Declaration public List<Cluster> Clusters { get; } Property Value Type Description List < Cluster > Methods DataIdxToClusterIdx(Int32) Converts a data point index to the index of the cluster that it is a part of. Declaration public int DataIdxToClusterIdx(int i) Parameters Type Name Description Int32 i Data point index. Returns Type Description Int32 Index of cluster that that data point is a part of. IsEmpty() Whether or not the table is empty. Declaration public override bool IsEmpty() Returns Type Description Boolean Overrides TableData.IsEmpty() Remarks Will still return true even if the table has a first column of cluster ids and nothing else."
  },
  "api/IVLab.Plotting.DataPlot.html": {
    "href": "api/IVLab.Plotting.DataPlot.html",
    "title": "Class DataPlot | IVLab 2DPlotting",
    "keywords": "Class DataPlot An abstract class that declares (and defines) variables and methods that are ubiquitous to all data plot implementations, such as plotting, updating, resizing and selection functionalities. Inheritance Object DataPlot ParallelCoordsPlot ScatterPlot Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class DataPlot : MonoBehaviour Fields applyColormap Declaration protected bool applyColormap Field Value Type Description Boolean brushSelectionRadius Radius of the BrushSelectionMode brush for the plot. Declaration protected float brushSelectionRadius Field Value Type Description Single centerOffset Offset of the plot from the center, determined by padding. Declaration protected Vector2 centerOffset Field Value Type Description Vector2 clickSelectionRadius Radius at which the plot's data points can be selected when in ClickSelectionMode . Declaration protected float clickSelectionRadius Field Value Type Description Single dataPointIndexMap Maps indices from the complete data point index space (i.e. linked index space) into the local index space used by the plot (i.e. the subset of the linked indices that the plot plots). Declaration protected Dictionary<int, int> dataPointIndexMap Field Value Type Description Dictionary < Int32 , Int32 > defaultColor The default color of data points in the plot. Declaration protected Color32 defaultColor Field Value Type Description Color32 deleteButton Button used to delete the plot. Declaration protected GameObject deleteButton Field Value Type Description GameObject highlightedColor The color of highlighted data points in the plot. Declaration protected Color32 highlightedColor Field Value Type Description Color32 innerBounds Dimensions of the plot's inner bounding rect (i.e. the dimensions of the plot itself). Declaration protected Vector2 innerBounds Field Value Type Description Vector2 linkedIndices Reference to the linked indices data structure that contains the current state of all of the data points. Declaration protected LinkedIndices linkedIndices Field Value Type Description LinkedIndices maskedColor The color of masked data points in the plot. Declaration protected Color32 maskedColor Field Value Type Description Color32 outerBounds Dimensions of the plot's outer bounding rect. Declaration protected Vector2 outerBounds Field Value Type Description Vector2 padding Padding between the outer bounding rect and the inner bounding rect. Declaration protected RectPadding padding Field Value Type Description RectPadding plotInnerRect Rect transform that visually makes up the plot's inner bounds. Declaration protected RectTransform plotInnerRect Field Value Type Description RectTransform plotMask Declaration protected RectTransform plotMask Field Value Type Description RectTransform plotOuterRect Rect transform that visually makes up the plot's outer bounds. Declaration protected RectTransform plotOuterRect Field Value Type Description RectTransform plotsCanvas The canvas that all plots are children of. Declaration protected Canvas plotsCanvas Field Value Type Description Canvas plotSelectionRect Slightly enlarged version of the inner bounding rect that makes up the valid selection area of the plot. Generated by taking innerBounds + Vector2.One * selectionPadding . Declaration protected RectTransform plotSelectionRect Field Value Type Description RectTransform plotSkin Styling specific to this data plot. Declaration protected DataPlotSkin plotSkin Field Value Type Description DataPlotSkin plottedDataPointIndices Array of data point indices plotted by this plot. Declaration protected int[] plottedDataPointIndices Field Value Type Description Int32 [] plottedDataPointMaxes Maximum value in each column of the data table for only the data points the plot plots. Declaration protected float[] plottedDataPointMaxes Field Value Type Description Single [] plottedDataPointMins Minimum value in each column of the data table for only the data points the plot plots. Declaration protected float[] plottedDataPointMins Field Value Type Description Single [] scaleAxesToZero Controls whether or not the plot axes are scaled so that the zero is visible. Declaration protected bool scaleAxesToZero Field Value Type Description Boolean selectionGraphicsRect Rect transform used to parent and offset selection graphics. Declaration protected RectTransform selectionGraphicsRect Field Value Type Description RectTransform selectionPadding Padding between the inner bounding rect and the selection rect. Allows the selection rect to be slightly larger than the plot itself, allowing for more forgiving selection interactions. Declaration protected float selectionPadding Field Value Type Description Single tableData Reference to the table data that the plot plots data from. Declaration protected TableData tableData Field Value Type Description TableData Properties BrushRadius Gets brushSelectionRadius . Declaration public float BrushRadius { get; } Property Value Type Description Single DeleteButton Gets the delete button attached to this plot. Declaration public GameObject DeleteButton { get; } Property Value Type Description GameObject InnerBounds Gets innerBounds . Declaration public Vector2 InnerBounds { get; } Property Value Type Description Vector2 OuterBounds Gets outerBounds . Declaration public Vector2 OuterBounds { get; } Property Value Type Description Vector2 PlotOuterRect Gets plotOuterRect . Declaration public RectTransform PlotOuterRect { get; } Property Value Type Description RectTransform PlotSelectionRect Gets plotSelectionRect . Declaration public RectTransform PlotSelectionRect { get; } Property Value Type Description RectTransform PlotSkin Gets plotSkin . Declaration public DataPlotSkin PlotSkin { get; } Property Value Type Description DataPlotSkin SelectionGraphicsRect Gets selectionGraphicsRect . Declaration public RectTransform SelectionGraphicsRect { get; } Property Value Type Description RectTransform Methods ApplyColormap(Texture2D, String) Applies a color map to the data plot based on the data in the specified column of the data table. Declaration public virtual void ApplyColormap(Texture2D colormap, string columnName) Parameters Type Name Description Texture2D colormap String columnName BrushSelection(Vector2, Vector2, SelectionMode.State) Controls the plot's reaction to the BrushSelectionMode . Declaration public abstract void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush in Canvas space. Vector2 brushDelta Change in position from the brush' previous position to its current. SelectionMode.State selectionState Current SelectionMode.State of the selection. ClickSelection(Vector2, SelectionMode.State) Controls the plot's reaction to the ClickSelectionMode . Declaration public abstract void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current mouse/selector position in Canvas space. SelectionMode.State selectionState Current SelectionMode.State of the selection. Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Initializes the plot. Ideally called immediately after the plot has been instantiated and before anything else. Declaration public virtual void Init(DataPlotGroup dataPlotGroup, DataPlotSkin plotSkin, Vector2 plotSize, int[] dataPointIndices = null) Parameters Type Name Description DataPlotGroup dataPlotGroup Group that this plot is a member of. DataPlotSkin plotSkin Styling skin to be applied to this plot. Vector2 plotSize Total size of the plot. Int32 [] dataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Plot() Plots the selected data points and refreshes the plot graphics to match. Declaration public abstract void Plot() RectSelection(RectTransform) Controls the plot's reaction to the RectSelectionMode . Declaration public abstract void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Current rect transform of the selection rect. RefreshPlotGraphics() Refreshes the plot graphics to reflect most recent changes to plot data points. Declaration public abstract void RefreshPlotGraphics() Remarks Often called after a series of UpdateDataPoint() calls. RemoveColormap() Removes colormap. Declaration public virtual void RemoveColormap() SetPlotSize(Vector2) Sets the size of the inner, outer, and selection bounds of the plot, along with the plot mask. Declaration public virtual void SetPlotSize(Vector2 plotSize) Parameters Type Name Description Vector2 plotSize UpdateAllDataPoints() Updates all data points to match the current state of the linked indices. Declaration public void UpdateAllDataPoints() UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) Updates a specific data point according to that data point's current linked index attributes. Declaration public abstract void UpdateDataPoint(int index, LinkedIndices.IndexAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.IndexAttributes indexAttributes Current attributes of the data point."
  },
  "api/IVLab.Plotting.DataPlotEvent.html": {
    "href": "api/IVLab.Plotting.DataPlotEvent.html",
    "title": "Class DataPlotEvent | IVLab 2DPlotting",
    "keywords": "Class DataPlotEvent Inheritance Object DataPlotEvent Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class DataPlotEvent : UnityEvent<DataPlot>"
  },
  "api/IVLab.Plotting.DataPlotGroup.html": {
    "href": "api/IVLab.Plotting.DataPlotGroup.html",
    "title": "Class DataPlotGroup | IVLab 2DPlotting",
    "keywords": "Class DataPlotGroup Defines a group of DataPlot objects along with their associated TableData and LinkedIndices . Inheritance Object DataPlotGroup Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataPlotGroup : MonoBehaviour Properties DataPlots Collection of plots that this class manages. Declaration public List<DataPlot> DataPlots { get; } Property Value Type Description List < DataPlot > LinkedIndices Gets the linked indices group this data plot group is a member of. Declaration public LinkedIndices LinkedIndices { get; } Property Value Type Description LinkedIndices MaskingMode Masking mode this plot group uses. Declaration public MaskingMode MaskingMode { get; set; } Property Value Type Description MaskingMode OnDataPlotAdded Declaration public DataPlotEvent OnDataPlotAdded { get; } Property Value Type Description DataPlotEvent OnHide Declaration public UnityEvent OnHide { get; } Property Value Type Description UnityEvent OnNewTableDataSet Declaration public UnityEvent OnNewTableDataSet { get; } Property Value Type Description UnityEvent OnShow Declaration public UnityEvent OnShow { get; } Property Value Type Description UnityEvent PlotsContainerPadding Padding around the plots container. Declaration public RectPadding PlotsContainerPadding { get; set; } Property Value Type Description RectPadding PlotSpacing Spacing between plots. Declaration public float PlotSpacing { get; set; } Property Value Type Description Single PlotsParent Gets the parent transform of all of the plots in this group. Declaration public Transform PlotsParent { get; } Property Value Type Description Transform Shown Whether or not this data plot group is currently shown. Declaration public bool Shown { get; } Property Value Type Description Boolean TableData Gets the data table this plot group is currently using. Can also be used to set the data table, which automatically causes LinkedIndices to reinitialize and deletes any linked plots, among other actions. Declaration public TableData TableData { get; set; } Property Value Type Description TableData Methods AddPlot(GameObject, DataPlotSkin, Vector2, Boolean) Adds a new plot to this group with given styling. Declaration public DataPlot AddPlot(GameObject plotPrefab, DataPlotSkin plotSkin, Vector2 plotSize, bool fromSelected = false) Parameters Type Name Description GameObject plotPrefab Prefab GameObject containing the data plot. DataPlotSkin plotSkin Skin containing styling information for the new data plot. Vector2 plotSize Size of plot. Boolean fromSelected Whether or not the plot should be created from only the currently selected points. Returns Type Description DataPlot ArrangePlots() Hard-coded (aka bad) template for arranging 1-4 plots. Declaration public void ArrangePlots() Hide() Hides this data plot group and disables its plot creation buttons. Declaration public void Hide() Init(TableData) Initializes this plot group by assigning it a data table, creating a parent object for all the plots it will control and initializing its plot creation button callbacks. Declaration public void Init(TableData tableData = null) Parameters Type Name Description TableData tableData RemovePlot(DataPlot) Removes the specified plot from this group and destroys it. Declaration public void RemovePlot(DataPlot dataPlot) Parameters Type Name Description DataPlot dataPlot DataPlot script attached to the data plot GameObject that we wish to remove. Show() Shows this data plot group and enables its plot creation buttons. Declaration public void Show()"
  },
  "api/IVLab.Plotting.DataPlotGroupManager.html": {
    "href": "api/IVLab.Plotting.DataPlotGroupManager.html",
    "title": "Class DataPlotGroupManager | IVLab 2DPlotting",
    "keywords": "Class DataPlotGroupManager Manages data plot groups, allowing for multiple data plot groups to exist at the same time. Inheritance Object DataPlotGroupManager Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataPlotGroupManager : MonoBehaviour Methods DisableSelection() Disables selection so that clicking the mouse has no effect. Declaration public void DisableSelection() EnableSelection() Enables selection so that clicking the mouse once again starts a selection. Declaration public void EnableSelection() SetCurrentSelectionMode(SelectionMode) Sets the current selection mode. Declaration public void SetCurrentSelectionMode(SelectionMode selectionMode) Parameters Type Name Description SelectionMode selectionMode"
  },
  "api/IVLab.Plotting.DataPlotSkin.html": {
    "href": "api/IVLab.Plotting.DataPlotSkin.html",
    "title": "Class DataPlotSkin | IVLab 2DPlotting",
    "keywords": "Class DataPlotSkin Inheritance Object DataPlotSkin ParallelCoordsPlotSkin ScatterPlotSkin Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DataPlotSkin : ScriptableObject Fields axisLabelTextColor Declaration public Color axisLabelTextColor Field Value Type Description Color borderColor Declaration public Color borderColor Field Value Type Description Color brushSelectionColor Declaration public Color brushSelectionColor Field Value Type Description Color brushSelectionRadius Declaration public float brushSelectionRadius Field Value Type Description Single clickSelectionRadius Declaration public float clickSelectionRadius Field Value Type Description Single defaultColor Declaration public Color defaultColor Field Value Type Description Color deleteButtonColor Declaration public Color deleteButtonColor Field Value Type Description Color gridlineColor Declaration public Color gridlineColor Field Value Type Description Color highlightedColor Declaration public Color highlightedColor Field Value Type Description Color maskedColor Declaration public Color maskedColor Field Value Type Description Color outlineColor Declaration public Color outlineColor Field Value Type Description Color padding Declaration public RectPadding padding Field Value Type Description RectPadding plotColor Declaration public Color plotColor Field Value Type Description Color rectSelectionColor Declaration public Color rectSelectionColor Field Value Type Description Color rectSelectionOutlineColor Declaration public Color rectSelectionOutlineColor Field Value Type Description Color scaleAxesToZero Declaration public bool scaleAxesToZero Field Value Type Description Boolean selectionPadding Declaration public float selectionPadding Field Value Type Description Single tickMarkColor Declaration public Color tickMarkColor Field Value Type Description Color Methods ApplyOverrideStyling(DataPlotSkin) Declaration public void ApplyOverrideStyling(DataPlotSkin plotSkin) Parameters Type Name Description DataPlotSkin plotSkin"
  },
  "api/IVLab.Plotting.DefaultMaskingMode.html": {
    "href": "api/IVLab.Plotting.DefaultMaskingMode.html",
    "title": "Class DefaultMaskingMode | IVLab 2DPlotting",
    "keywords": "Class DefaultMaskingMode Inheritance Object MaskingMode DefaultMaskingMode Inherited Members MaskingMode.toggleKey MaskingMode.linkedIndices MaskingMode.ToggleKey Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class DefaultMaskingMode : MaskingMode Methods ToggleMasking() Basic mask/unmask toggling of unselected points in Scatter and Parallel Coords plots. Declaration public override void ToggleMasking() Overrides MaskingMode.ToggleMasking()"
  },
  "api/IVLab.Plotting.html": {
    "href": "api/IVLab.Plotting.html",
    "title": "Namespace IVLab.Plotting | IVLab 2DPlotting",
    "keywords": "Namespace IVLab.Plotting Classes AttributeChangedEvent AttributesChangedEvent BrushSelectionMode A brush-like SelectionMode that asks the current DataPlot it is working on to select any data points that have been brushed over since it was last updated. ClickSelectionMode A click-based SelectionMode that asks the current DataPlot it is working on to select the nearest data point that lies within the click position. Cluster A collection of (consecutive) data point indices that should be treated as related. ClusterMaskingToggle ClusterPlot An implementation of ScatterPlot that allows data points to be clustered together so that related data can be selected all at once. ClusterPlot.ClusterPlotCluster A Cluster implementation that adds some additional attributes specific to the necessities of the ClusterPlot . ClusterPlotManager ClusterPlotSkin ClusterTableData Special type of TableData where each row has an additional identifier to indicate which \"cluster\" that data point is a part of. DataPlot An abstract class that declares (and defines) variables and methods that are ubiquitous to all data plot implementations, such as plotting, updating, resizing and selection functionalities. DataPlotEvent DataPlotGroup Defines a group of DataPlot objects along with their associated TableData and LinkedIndices . DataPlotGroupManager Manages data plot groups, allowing for multiple data plot groups to exist at the same time. DataPlotSkin DefaultMaskingMode LayerApplier Ensures layers are properly applied throughout the scene on awake. LinkedIndices This class provides an \"index space\" wherein each index consists of a number attributes, such as whether or not that index (and the data that is linked with it) is highlighted or masked. LinkedIndices.IndexAttributes This class acts as a container for the attributes attached to each individual index, as used by LinkedIndices . MaskingMode Abstract class which declares variables and methods ubiquitous to all possible masking modes. NiceAxisLabel Creates \"nice\" axis labels by taking the min and max values that the axis needs to display and altering them to create an even tick spacing. ParallelCoordsPlot Parallel coordinates plot DataPlot implementation that uses Unity particle systems along with line renderers to efficiently render many data points at once. ParallelCoordsPlotSkin PlotConfigContainer PlotConfigRowContainer PlotsCanvasSkin PlotSetupContainer PlottingUtilities A collection of utilities intended to improve the usability of the 2DPlotting package. PlottingUtilities.Consts Global access to constants used in the 2D plotting package. RectPadding Describes padding around a rectangular object. RectSelectionMode A rectangular SelectionMode that generates a selection rectangle and asks the current DataPlot it is working on to select any data points that lie within it. ScatterPlot Scatter plot DataPlot implementation that uses Unity's particle system to efficiently render many data points at once. ScatterPlotSkin SelectionMode Abstract class which declares variables and methods ubiquitous to all possible selection modes. SplitViewController Basic control over the 2D/3D split camera view. TableData Column-major order data table that can be initialized from a basic CSV, another data table, or with random data. TabularDataContainer An abstract container for tabular data. Derived classes are tabular data container components which can be attached to GameObjects and then dragged and dropped directly in to a DataPlotGroup via the inspector. TabularDataFromCSVContainer Structs NiceAxisLabel.AxisLabelInfo Stores all the information needed to generate axis labels. Enums SelectionMode.State Selection states."
  },
  "api/IVLab.Plotting.LayerApplier.html": {
    "href": "api/IVLab.Plotting.LayerApplier.html",
    "title": "Class LayerApplier | IVLab 2DPlotting",
    "keywords": "Class LayerApplier Ensures layers are properly applied throughout the scene on awake. Inheritance Object LayerApplier Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class LayerApplier : MonoBehaviour"
  },
  "api/IVLab.Plotting.LinkedIndices.html": {
    "href": "api/IVLab.Plotting.LinkedIndices.html",
    "title": "Class LinkedIndices | IVLab 2DPlotting",
    "keywords": "Class LinkedIndices This class provides an \"index space\" wherein each index consists of a number attributes, such as whether or not that index (and the data that is linked with it) is highlighted or masked. Inheritance Object LinkedIndices Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class LinkedIndices : MonoBehaviour Properties AnyIndexAttributeChanged An automatically toggled flag that indicates if any attribute has been changed. Declaration public bool AnyIndexAttributeChanged { get; set; } Property Value Type Description Boolean HighlightedCount Number of indices with highlighted attribute currently set to true. Declaration public int HighlightedCount { get; } Property Value Type Description Int32 Item[Int32] Allows attributes to be accessed and set with array accessor, e.g. linkedIndices[i]. Declaration public LinkedIndices.IndexAttributes this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description LinkedIndices.IndexAttributes MaskedCount Number of indices with masked attribute currently set to true. Declaration public int MaskedCount { get; } Property Value Type Description Int32 OnAnyIndexAttributeChanged Event triggered at most once per frame when any linked index attribute has changed. Declaration public UnityEvent OnAnyIndexAttributeChanged { get; } Property Value Type Description UnityEvent Remarks Invoked in LateUpdate after all OnIndexAttributeChanged invocations for that frame have been made. Can thus also be used as a callback for when to apply styling changes. OnIndexAttributeChanged Event triggered for each index that had an attribute change during the current frame. Declaration public AttributeChangedEvent OnIndexAttributeChanged { get; } Property Value Type Description AttributeChangedEvent Remarks Invoked in LateUpdate for each index that had an attribute change that frame. OnIndexAttributesChanged Event triggered once with a list of each index that had an attribute change during the current frame. Declaration public AttributesChangedEvent OnIndexAttributesChanged { get; } Property Value Type Description AttributesChangedEvent Remarks Invoked in LateUpdate with a list of each index that had an attribute change that frame. OnIndicesReinitialized Event triggered when linked indices Init(Int32) method is called. Declaration public UnityEvent OnIndicesReinitialized { get; } Property Value Type Description UnityEvent Size Total number of indices. Declaration public int Size { get; } Property Value Type Description Int32 Methods Init(Int32) Constructor to initialize linked attributes array with set size. Declaration public void Init(int size) Parameters Type Name Description Int32 size Number of indices. Reset() Resets the attributes of the linked indices. Declaration public void Reset()"
  },
  "api/IVLab.Plotting.LinkedIndices.IndexAttributes.html": {
    "href": "api/IVLab.Plotting.LinkedIndices.IndexAttributes.html",
    "title": "Class LinkedIndices.IndexAttributes | IVLab 2DPlotting",
    "keywords": "Class LinkedIndices.IndexAttributes This class acts as a container for the attributes attached to each individual index, as used by LinkedIndices . Inheritance Object LinkedIndices.IndexAttributes Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class IndexAttributes Constructors IndexAttributes(LinkedIndices, Boolean, Boolean) Constructor takes a reference to the LinkedIndices object that holds the array of which this LinkedAtrribute is a part of. Declaration public IndexAttributes(LinkedIndices linkedIndices, bool highlighted = false, bool masked = false) Parameters Type Name Description LinkedIndices linkedIndices Boolean highlighted Boolean masked Remarks Constructors do not increment highlighted/masked counters, as that is the responsibility of LinkedIndices IndexAttributes(LinkedIndices.IndexAttributes) Copy constructor used to construct linked attributes out of another set of linked attributes. Declaration public IndexAttributes(LinkedIndices.IndexAttributes indexAttributes) Parameters Type Name Description LinkedIndices.IndexAttributes indexAttributes Remarks Constructors do not increment highlighted/masked counters, as that is the responsibility of LinkedIndices Properties Highlighted Flags whether or not this index is highlighted (selected), automatically toggling IndexAttributeChanged and AnyIndexAttributeChanged to true if the value is indeed changed. Declaration public bool Highlighted { get; set; } Property Value Type Description Boolean IndexAttributeChanged A flag that signals whether or not any of the linked attributes have changed. This flag is automatically set to true when an attribute changes, but it must manually be set to false. Declaration public bool IndexAttributeChanged { get; set; } Property Value Type Description Boolean Examples For example, a common sequence of use for this attribute would occur along the lines of: \"At some point, the 'Highlighted' attribute of linked index i is set to true.\" \"If this attribute was previously false, i.e we are now changing its value, its IndexAttributeChanged flag will automatically be set to true\" \"In other words, there's no need for us to directly set `linkedIndices[i].IndexAttributeChanged = true;`\" linkedIndices[i].Highlighted = true; . . . \"Later on, we can choose to work with the linked index attributes of i only if they have changed\" if (linkedIndices[i].IndexAttributeChanged) { if (linkedIndices[i].Highlighted) { Debug.Log(\"Index \" + i + \" changed to highlighted state.\"); } else { Debug.Log(\"Index \" + i + \" changed to un-highlighted state.\"); } \"We do have to be sure to toggle the flag back to false after we use it, however\" linkedIndices[i].IndexAttributeChanged = false; } Masked Flags whether or not this index is masked (filtered), automatically toggling IndexAttributeChanged and AnyIndexAttributeChanged to true if the value is indeed changed. Declaration public bool Masked { get; set; } Property Value Type Description Boolean Methods Reset() Resets linked attribute to unhighlighted/unmasked state. Declaration public void Reset()"
  },
  "api/IVLab.Plotting.MaskingMode.html": {
    "href": "api/IVLab.Plotting.MaskingMode.html",
    "title": "Class MaskingMode | IVLab 2DPlotting",
    "keywords": "Class MaskingMode Abstract class which declares variables and methods ubiquitous to all possible masking modes. Inheritance Object MaskingMode ClusterMaskingToggle DefaultMaskingMode Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class MaskingMode : MonoBehaviour Fields linkedIndices Declaration protected LinkedIndices linkedIndices Field Value Type Description LinkedIndices toggleKey Declaration protected KeyCode toggleKey Field Value Type Description KeyCode Properties ToggleKey Key used to toggle masking. Declaration public KeyCode ToggleKey { get; set; } Property Value Type Description KeyCode Methods ToggleMasking() Mask/unmask unselected points for given linked indices group. Declaration public abstract void ToggleMasking()"
  },
  "api/IVLab.Plotting.NiceAxisLabel.AxisLabelInfo.html": {
    "href": "api/IVLab.Plotting.NiceAxisLabel.AxisLabelInfo.html",
    "title": "Struct NiceAxisLabel.AxisLabelInfo | IVLab 2DPlotting",
    "keywords": "Struct NiceAxisLabel.AxisLabelInfo Stores all the information needed to generate axis labels. Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public struct AxisLabelInfo Fields axisDirection Declaration public Vector2 axisDirection Field Value Type Description Vector2 axisScale Declaration public Vector2 axisScale Field Value Type Description Vector2 gridlineOffset Declaration public Vector2 gridlineOffset Field Value Type Description Vector2 gridlineScale Declaration public Vector2 gridlineScale Field Value Type Description Vector2 horizontalAlignment Declaration public HorizontalAlignmentOptions horizontalAlignment Field Value Type Description HorizontalAlignmentOptions niceMax Declaration public float niceMax Field Value Type Description Single niceMin Declaration public float niceMin Field Value Type Description Single niceRange Declaration public float niceRange Field Value Type Description Single niceTickSpacing Declaration public float niceTickSpacing Field Value Type Description Single numbersOffset Declaration public Vector2 numbersOffset Field Value Type Description Vector2 tickMarkOffset Declaration public Vector2 tickMarkOffset Field Value Type Description Vector2 tickMarkScale Declaration public Vector2 tickMarkScale Field Value Type Description Vector2 verticalAlignment Declaration public VerticalAlignmentOptions verticalAlignment Field Value Type Description VerticalAlignmentOptions"
  },
  "api/IVLab.Plotting.NiceAxisLabel.html": {
    "href": "api/IVLab.Plotting.NiceAxisLabel.html",
    "title": "Class NiceAxisLabel | IVLab 2DPlotting",
    "keywords": "Class NiceAxisLabel Creates \"nice\" axis labels by taking the min and max values that the axis needs to display and altering them to create an even tick spacing. Inheritance Object NiceAxisLabel Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class NiceAxisLabel : MonoBehaviour Properties Inverted Declaration public bool Inverted { get; set; } Property Value Type Description Boolean NiceMax Declaration public float NiceMax { get; } Property Value Type Description Single NiceMin Declaration public float NiceMin { get; } Property Value Type Description Single Methods GenerateCustomAxisLabel(NiceAxisLabel.AxisLabelInfo, Vector2, Single, Boolean) Generates a custom axis label from axis label info. Use this after calling GenerateSecondaryAxisInfo() to create and draw a secondary axis label. Declaration public void GenerateCustomAxisLabel(NiceAxisLabel.AxisLabelInfo axisLabelInfo, Vector2 sourcePos, float length, bool drawGridlines = false) Parameters Type Name Description NiceAxisLabel.AxisLabelInfo axisLabelInfo Vector2 sourcePos Single length Boolean drawGridlines GenerateNiceMinMax(Single, Single) Uses Wilkinson's algorithm (or Heckbert's if Wilkinson's fails) to generate a \"nice\" set of min, max and tick spacing values for the given data range. Declaration public (float, float) GenerateNiceMinMax(float min, float max) Parameters Type Name Description Single min Minimum value in the data range. Single max Maximum value in the data range. Returns Type Description (T1, T2) < Single , Single > Both the adjusted \"nice\" min and the \"nice\" max, in tuple form. Remarks Must be called prior to generating axis labels. GenerateSecondaryAxisInfo(Single, Single) Generates all info necessary to create a secondary axis label. Declaration public NiceAxisLabel.AxisLabelInfo GenerateSecondaryAxisInfo(float min, float max) Parameters Type Name Description Single min Secondary range min, before being \"nice\"-ified. Single max Secondary range max, before being \"nice\"-ified. Returns Type Description NiceAxisLabel.AxisLabelInfo GenerateXAxisLabel(Vector2, Vector2, Boolean) Sets the necessary local variables before calling IVLab.Plotting.NiceAxisLabel.GenerateAxisLabel(Vector2,System.Single,System.Boolean) in order to generate the axis labels in the x-direction. Declaration public void GenerateXAxisLabel(Vector2 sourcePos, Vector2 bounds, bool drawGridlines = false) Parameters Type Name Description Vector2 sourcePos Start position of the axis (where the minimum value is located) Vector2 bounds Bounds of the plot. Boolean drawGridlines Whether or not to draw gridlines as part of the axis labels. GenerateYAxisLabel(Vector2, Vector2, Boolean, Boolean) Sets the necessary local variables before calling IVLab.Plotting.NiceAxisLabel.GenerateAxisLabel(Vector2,System.Single,System.Boolean) in order to generate the axis labels in the y-direction. Declaration public void GenerateYAxisLabel(Vector2 sourcePos, Vector2 bounds, bool sidewaysNumbers = false, bool drawGridlines = false) Parameters Type Name Description Vector2 sourcePos Start position of the axis (where the minimum value is located) Vector2 bounds Bounds of the plot. Boolean sidewaysNumbers Boolean drawGridlines Whether or not to draw gridlines as part of the axis labels. SetStyling(Color, Color, Color) Declaration public void SetStyling(Color axisLabelTextColor, Color tickMarkColor, Color gridlineColor) Parameters Type Name Description Color axisLabelTextColor Color tickMarkColor Color gridlineColor"
  },
  "api/IVLab.Plotting.ParallelCoordsPlot.html": {
    "href": "api/IVLab.Plotting.ParallelCoordsPlot.html",
    "title": "Class ParallelCoordsPlot | IVLab 2DPlotting",
    "keywords": "Class ParallelCoordsPlot Parallel coordinates plot DataPlot implementation that uses Unity particle systems along with line renderers to efficiently render many data points at once. Inheritance Object DataPlot ParallelCoordsPlot Inherited Members DataPlot.plotSkin DataPlot.outerBounds DataPlot.innerBounds DataPlot.centerOffset DataPlot.scaleAxesToZero DataPlot.padding DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.applyColormap DataPlot.plotMask DataPlot.selectionGraphicsRect DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.tableData DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.dataPointIndexMap DataPlot.plottedDataPointIndices DataPlot.plottedDataPointMins DataPlot.plottedDataPointMaxes DataPlot.OuterBounds DataPlot.InnerBounds DataPlot.SelectionGraphicsRect DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.PlotSkin DataPlot.DeleteButton DataPlot.SetPlotSize(Vector2) DataPlot.ApplyColormap(Texture2D, String) DataPlot.RemoveColormap() DataPlot.UpdateAllDataPoints() Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ParallelCoordsPlot : DataPlot Fields defaultLineColor The default color of lines in the plot. Declaration protected Color32 defaultLineColor Field Value Type Description Color32 highlightedLineColor The color of highlighted lines in the plot. Declaration protected Color32 highlightedLineColor Field Value Type Description Color32 maskedLineColor The color of masked lines in the plot. Declaration protected Color32 maskedLineColor Field Value Type Description Color32 parallelCoordsPlotSkin Styling specific to this parallel coords plot. Declaration protected ParallelCoordsPlotSkin parallelCoordsPlotSkin Field Value Type Description ParallelCoordsPlotSkin pointIsHidden Matrix (column-major) of whether or not each point is hidden (and therefore unselectable). Declaration protected bool[][] pointIsHidden Field Value Type Description Boolean [][] Remarks Allows for points to be unselectable when masked, and for NaN values to be loaded into the data table but be ignored when plotting/selecting. Methods BrushSelection(Vector2, Vector2, SelectionMode.State) Selects all the data points that the brush has passed over. Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush. Vector2 brushDelta Change in position from previous to current. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. ClickSelection(Vector2, SelectionMode.State) Selects the point within the point selection radius that is closest to the mouse selection position if the selection state is \"Start\", and otherwise simply checks to see if the initially selected point is still within the point selection radius, highlighting it if it is, unhighlighting it if it is not. Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current selection position. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.ClickSelection(Vector2, SelectionMode.State) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. FlipAxis(Int32) Flips the j'th axis of the plot. Declaration public void FlipAxis(int j) Parameters Type Name Description Int32 j Index into the data table for the column/axis that should be flipped. Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Initializes the parallel coords plot by initializing its particle systems, line renderers, axis labeling scripts, and axis-flipping buttons. Declaration public override void Init(DataPlotGroup dataPlotGroup, DataPlotSkin plotSkin, Vector2 plotSize, int[] dataPointIndices = null) Parameters Type Name Description DataPlotGroup dataPlotGroup Group that this plot is a member of. DataPlotSkin plotSkin Styling skin to be applied to this plot. Vector2 plotSize Totale size of the plot. Int32 [] dataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides DataPlot.Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Plot() Plots only the selected data in the data table, updating all particle systems and line renderers. Declaration public override void Plot() Overrides DataPlot.Plot() RectSelection(RectTransform) Selects all of the data points inside the given selection rectangle. Declaration public override void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Transform of the selection rectangle. Overrides DataPlot.RectSelection(RectTransform) Remarks For a parallel coords plot, a \"data point\" consists of multiple point particles, any of which could be selected. RefreshPlotGraphics() Updates the point particle systems to reflect the current state of the data point particles. Declaration public override void RefreshPlotGraphics() Overrides DataPlot.RefreshPlotGraphics() Remarks Usually called after a series of UpdateDataPoint() calls to ensure that those updates are visually reflected. UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) Updates a specified data point (which for a parallel coords plot includes multiple point particles and their line renderer) based on its linked index attributes, only if it is within the subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.IndexAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.IndexAttributes indexAttributes Current attributes of the data point. Overrides DataPlot.UpdateDataPoint(Int32, LinkedIndices.IndexAttributes)"
  },
  "api/IVLab.Plotting.ParallelCoordsPlotSkin.html": {
    "href": "api/IVLab.Plotting.ParallelCoordsPlotSkin.html",
    "title": "Class ParallelCoordsPlotSkin | IVLab 2DPlotting",
    "keywords": "Class ParallelCoordsPlotSkin Inheritance Object DataPlotSkin ParallelCoordsPlotSkin Inherited Members DataPlotSkin.plotColor DataPlotSkin.borderColor DataPlotSkin.outlineColor DataPlotSkin.axisLabelTextColor DataPlotSkin.gridlineColor DataPlotSkin.tickMarkColor DataPlotSkin.deleteButtonColor DataPlotSkin.padding DataPlotSkin.scaleAxesToZero DataPlotSkin.defaultColor DataPlotSkin.highlightedColor DataPlotSkin.maskedColor DataPlotSkin.rectSelectionColor DataPlotSkin.rectSelectionOutlineColor DataPlotSkin.brushSelectionColor DataPlotSkin.clickSelectionRadius DataPlotSkin.brushSelectionRadius DataPlotSkin.selectionPadding DataPlotSkin.ApplyOverrideStyling(DataPlotSkin) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ParallelCoordsPlotSkin : DataPlotSkin Fields defaultLineColor Declaration public Color defaultLineColor Field Value Type Description Color flipAxisButtonColor Declaration public Color flipAxisButtonColor Field Value Type Description Color flipAxisButtonOutlineColor Declaration public Color flipAxisButtonOutlineColor Field Value Type Description Color highlightedLineColor Declaration public Color highlightedLineColor Field Value Type Description Color lineWidth Declaration public float lineWidth Field Value Type Description Single maskedLineColor Declaration public Color maskedLineColor Field Value Type Description Color pointSize Declaration public float pointSize Field Value Type Description Single"
  },
  "api/IVLab.Plotting.PlotConfigContainer.html": {
    "href": "api/IVLab.Plotting.PlotConfigContainer.html",
    "title": "Class PlotConfigContainer | IVLab 2DPlotting",
    "keywords": "Class PlotConfigContainer Inheritance Object PlotConfigContainer Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class PlotConfigContainer Fields plotSetup Declaration public int plotSetup Field Value Type Description Int32 xColumnName Declaration public string xColumnName Field Value Type Description String yColumnName Declaration public string yColumnName Field Value Type Description String"
  },
  "api/IVLab.Plotting.PlotConfigRowContainer.html": {
    "href": "api/IVLab.Plotting.PlotConfigRowContainer.html",
    "title": "Class PlotConfigRowContainer | IVLab 2DPlotting",
    "keywords": "Class PlotConfigRowContainer Inheritance Object PlotConfigRowContainer Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class PlotConfigRowContainer Fields plotConfigs Declaration public PlotConfigContainer[] plotConfigs Field Value Type Description PlotConfigContainer []"
  },
  "api/IVLab.Plotting.PlotsCanvasSkin.html": {
    "href": "api/IVLab.Plotting.PlotsCanvasSkin.html",
    "title": "Class PlotsCanvasSkin | IVLab 2DPlotting",
    "keywords": "Class PlotsCanvasSkin Inheritance Object PlotsCanvasSkin Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class PlotsCanvasSkin : ScriptableObject Fields backgroundColor Declaration public Color backgroundColor Field Value Type Description Color dividerColor Declaration public Color dividerColor Field Value Type Description Color interactionPanelColor Declaration public Color interactionPanelColor Field Value Type Description Color interactionPanelOutlineColor Declaration public Color interactionPanelOutlineColor Field Value Type Description Color"
  },
  "api/IVLab.Plotting.PlotSetupContainer.html": {
    "href": "api/IVLab.Plotting.PlotSetupContainer.html",
    "title": "Class PlotSetupContainer | IVLab 2DPlotting",
    "keywords": "Class PlotSetupContainer Inheritance Object PlotSetupContainer Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class PlotSetupContainer Fields newPlotButton Declaration public Button newPlotButton Field Value Type Description Button newPlotFromSelectedButton Declaration public Button newPlotFromSelectedButton Field Value Type Description Button plotPrefab Declaration public GameObject plotPrefab Field Value Type Description GameObject plotSkin Declaration public DataPlotSkin plotSkin Field Value Type Description DataPlotSkin"
  },
  "api/IVLab.Plotting.PlottingUtilities.Consts.html": {
    "href": "api/IVLab.Plotting.PlottingUtilities.Consts.html",
    "title": "Class PlottingUtilities.Consts | IVLab 2DPlotting",
    "keywords": "Class PlottingUtilities.Consts Global access to constants used in the 2D plotting package. Inheritance Object PlottingUtilities.Consts Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public static class Consts Fields PlotsLayerName Declaration public const string PlotsLayerName = \"2DPlots\" Field Value Type Description String PlotsSortingLayerName Declaration public const string PlotsSortingLayerName = \"2DPlots\" Field Value Type Description String"
  },
  "api/IVLab.Plotting.PlottingUtilities.html": {
    "href": "api/IVLab.Plotting.PlottingUtilities.html",
    "title": "Class PlottingUtilities | IVLab 2DPlotting",
    "keywords": "Class PlottingUtilities A collection of utilities intended to improve the usability of the 2DPlotting package. Inheritance Object PlottingUtilities Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class PlottingUtilities Methods ApplyPlotsLayersRecursive(GameObject) Applies \"plots\" layer to a gameObject and all of its children. Declaration public static void ApplyPlotsLayersRecursive(GameObject gameObject) Parameters Type Name Description GameObject gameObject ClusterTableDatas(TableData[], Single[], Color[], String) Takes an array of data tables and clusters/concatenates them vertically into a single \"cluster\" data table if possible, returning null if not. This \"cluster\" data table has an additional column identifying the data table each row came from. Declaration public static ClusterTableData ClusterTableDatas(TableData[] tableDatas, float[] clusterIds = null, Color[] clusterColors = null, string identifierColumnName = \"Cluster\") Parameters Type Name Description TableData [] tableDatas Array of data tables to be concatenated. Single [] clusterIds Optional array of identifiers for each cluster. Color [] clusterColors Optional array of colors for each cluster String identifierColumnName Optional name for the identifier column that will be generated. Returns Type Description ClusterTableData Single concatenated \"cluster\" data table, or null if the tables could not be concatenated."
  },
  "api/IVLab.Plotting.RectPadding.html": {
    "href": "api/IVLab.Plotting.RectPadding.html",
    "title": "Class RectPadding | IVLab 2DPlotting",
    "keywords": "Class RectPadding Describes padding around a rectangular object. Inheritance Object RectPadding Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax [Serializable] public class RectPadding Constructors RectPadding(Single) Declaration public RectPadding(float padding) Parameters Type Name Description Single padding RectPadding(Single, Single, Single, Single) Declaration public RectPadding(float right, float left, float top, float bottom) Parameters Type Name Description Single right Single left Single top Single bottom Fields bottom Declaration public float bottom Field Value Type Description Single left Declaration public float left Field Value Type Description Single right Declaration public float right Field Value Type Description Single top Declaration public float top Field Value Type Description Single"
  },
  "api/IVLab.Plotting.RectSelectionMode.html": {
    "href": "api/IVLab.Plotting.RectSelectionMode.html",
    "title": "Class RectSelectionMode | IVLab 2DPlotting",
    "keywords": "Class RectSelectionMode A rectangular SelectionMode that generates a selection rectangle and asks the current DataPlot it is working on to select any data points that lie within it. Inheritance Object SelectionMode RectSelectionMode Inherited Members SelectionMode.plotsCamera SelectionMode.currentDataPlot SelectionMode.currentPlotRect Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class RectSelectionMode : SelectionMode Fields selectionGraphicsParent Parent object that stores selection graphics when they are not in use. Declaration protected Transform selectionGraphicsParent Field Value Type Description Transform Methods EndSelection(Vector2) Finalize the selection by updating it one last time and then deactivating the selection rectangle. Declaration public override void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.EndSelection(Vector2) StartSelection(DataPlot, Vector2) Set reference to the data plot this selection is now acting in, then reset, activate, and determine the starting position of the selection rectangle. Declaration public override void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.StartSelection(DataPlot, Vector2) UpdateSelection(Vector2) Update the size of the selection rectangle and let the current plot select anything within it. Declaration public override void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). Overrides SelectionMode.UpdateSelection(Vector2)"
  },
  "api/IVLab.Plotting.ScatterPlot.html": {
    "href": "api/IVLab.Plotting.ScatterPlot.html",
    "title": "Class ScatterPlot | IVLab 2DPlotting",
    "keywords": "Class ScatterPlot Scatter plot DataPlot implementation that uses Unity's particle system to efficiently render many data points at once. Inheritance Object DataPlot ScatterPlot ClusterPlot Inherited Members DataPlot.plotSkin DataPlot.outerBounds DataPlot.innerBounds DataPlot.centerOffset DataPlot.scaleAxesToZero DataPlot.padding DataPlot.selectionPadding DataPlot.clickSelectionRadius DataPlot.brushSelectionRadius DataPlot.defaultColor DataPlot.highlightedColor DataPlot.maskedColor DataPlot.applyColormap DataPlot.plotMask DataPlot.selectionGraphicsRect DataPlot.plotOuterRect DataPlot.plotInnerRect DataPlot.plotSelectionRect DataPlot.deleteButton DataPlot.tableData DataPlot.linkedIndices DataPlot.plotsCanvas DataPlot.dataPointIndexMap DataPlot.plottedDataPointIndices DataPlot.plottedDataPointMins DataPlot.plottedDataPointMaxes DataPlot.OuterBounds DataPlot.InnerBounds DataPlot.SelectionGraphicsRect DataPlot.PlotOuterRect DataPlot.PlotSelectionRect DataPlot.BrushRadius DataPlot.PlotSkin DataPlot.DeleteButton DataPlot.UpdateAllDataPoints() Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ScatterPlot : DataPlot Fields axisLabelPrefab Prefab from which axis labels can be instantiated. Declaration protected GameObject axisLabelPrefab Field Value Type Description GameObject axisLabelsParent Parent used to store axes labels in the scene hierarchy. Declaration protected Transform axisLabelsParent Field Value Type Description Transform axisTitleOffset Offset between the edge of the plot and the axis title. Declaration protected float axisTitleOffset Field Value Type Description Single clickedPointIdx Index into pointPositions array of the point currently selected by the click selection mode. Declaration protected int clickedPointIdx Field Value Type Description Int32 defaultPointColors Array of colros of all the points on the plot. Declaration protected Color32[] defaultPointColors Field Value Type Description Color32 [] dropdownCanvas Declaration protected Canvas dropdownCanvas Field Value Type Description Canvas plotParticlesParent Declaration protected Transform plotParticlesParent Field Value Type Description Transform plotParticleSystem Particle system instance used to render data points. Declaration protected ParticleSystem plotParticleSystem Field Value Type Description ParticleSystem plotParticleSystemPrefab Declaration protected GameObject plotParticleSystemPrefab Field Value Type Description GameObject pointIsHidden Array of whether or not each point is hidden (and therefore unselectable). Declaration protected bool[] pointIsHidden Field Value Type Description Boolean [] Remarks Allows for points to be unselectable when masked, and for NaN values to be loaded into the data table but be ignored when plotting/selecting. pointParticles Array of particles representing all the points on the plot. Declaration protected ParticleSystem.Particle[] pointParticles Field Value Type Description ParticleSystem.Particle [] pointPositions Array of positions of all the points on the plot. Declaration protected Vector2[] pointPositions Field Value Type Description Vector2 [] pointSize Declaration protected float pointSize Field Value Type Description Single scatterPlotSkin Styling specific to this scatter plot Declaration protected ScatterPlotSkin scatterPlotSkin Field Value Type Description ScatterPlotSkin xAxisLabel Axis label generating scripts. Declaration protected NiceAxisLabel xAxisLabel Field Value Type Description NiceAxisLabel xAxisTitle Text axis labels. Declaration protected TextMeshProUGUI xAxisTitle Field Value Type Description TextMeshProUGUI xColumnIdx Indices into data table of currently selected columns that are being compared. Declaration protected int xColumnIdx Field Value Type Description Int32 xDropdown Dropdowns used to select which columns should be compared Declaration protected TMP_Dropdown xDropdown Field Value Type Description TMP_Dropdown yAxisLabel Axis label generating scripts. Declaration protected NiceAxisLabel yAxisLabel Field Value Type Description NiceAxisLabel yAxisTitle Text axis labels. Declaration protected TextMeshProUGUI yAxisTitle Field Value Type Description TextMeshProUGUI yColumnIdx Indices into data table of currently selected columns that are being compared. Declaration protected int yColumnIdx Field Value Type Description Int32 yDropdown Dropdowns used to select which columns should be compared Declaration protected TMP_Dropdown yDropdown Field Value Type Description TMP_Dropdown Methods ApplyColormap(Texture2D, String) Declaration public override void ApplyColormap(Texture2D colormap, string columnName) Parameters Type Name Description Texture2D colormap String columnName Overrides DataPlot.ApplyColormap(Texture2D, String) BrushSelection(Vector2, Vector2, SelectionMode.State) Selects all the data points that the brush has passed over. Declaration public override void BrushSelection(Vector2 prevBrushPosition, Vector2 brushDelta, SelectionMode.State selectionState) Parameters Type Name Description Vector2 prevBrushPosition Previous position of the brush. Vector2 brushDelta Change in position from previous to current. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.BrushSelection(Vector2, Vector2, SelectionMode.State) ClickSelection(Vector2, SelectionMode.State) Selects the point within the point selection radius that is closest to the mouse selection position if the selection state is \"Start\", and otherwise simply checks to see if the initially selected point is still within the point selection radius, highlighting it if it is, unhighlighting it if it is not. Declaration public override void ClickSelection(Vector2 selectionPosition, SelectionMode.State selectionState) Parameters Type Name Description Vector2 selectionPosition Current selection position. SelectionMode.State selectionState State of the selection, e.g. Start/Update/End. Overrides DataPlot.ClickSelection(Vector2, SelectionMode.State) DecrementXColumn() Decrements the column displayed on the x-axis and re-plots. Declaration public virtual void DecrementXColumn() DecrementYColumn() Decrements the column displayed on the y-axis and re-plots. Declaration public virtual void DecrementYColumn() DropdownSetColumnNames() Clears and then adds the column names from the data table to the x and y dropdown menus. Declaration protected virtual void DropdownSetColumnNames() IncrementXColumn() Increments the column displayed on the x-axis and re-plots. Declaration public virtual void IncrementXColumn() IncrementYColumn() Increments the column displayed on the y-axis and re-plots. Declaration public virtual void IncrementYColumn() Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Initializes the scatter plot by initializing its particle system, axis labeling scripts, and column selection dropdown menus. Declaration public override void Init(DataPlotGroup dataPlotGroup, DataPlotSkin plotSkin, Vector2 plotSize, int[] dataPointIndices = null) Parameters Type Name Description DataPlotGroup dataPlotGroup Group that this plot is a member of. DataPlotSkin plotSkin Styling skin to be applied to this plot. Vector2 plotSize Totale size of the plot. Int32 [] dataPointIndices Array of data point indices the plot should display. If null , all data points will be displayed by default. Overrides DataPlot.Init(DataPlotGroup, DataPlotSkin, Vector2, Int32[]) Plot() Plots only the selected data in the data table based on the two currently selected columns. Declaration public override void Plot() Overrides DataPlot.Plot() RectSelection(RectTransform) Selects all of the data points inside the given selection rectangle. Declaration public override void RectSelection(RectTransform selectionRect) Parameters Type Name Description RectTransform selectionRect Transform of the selection rectangle. Overrides DataPlot.RectSelection(RectTransform) RefreshPlotGraphics() Updates the point particle system to reflect the current state of the data point particles. Declaration public override void RefreshPlotGraphics() Overrides DataPlot.RefreshPlotGraphics() Remarks Usually called after a series of UpdateDataPoint() calls to ensure that those updates are visually reflected. RemoveColormap() Declaration public override void RemoveColormap() Overrides DataPlot.RemoveColormap() SetPlotSize(Vector2) Sets the plot size, as well as positioning the dropdown menus. Declaration public override void SetPlotSize(Vector2 plotSize) Parameters Type Name Description Vector2 plotSize Overrides DataPlot.SetPlotSize(Vector2) SetPlottedColumns(String, String) Sets the columns from the table data plotted by this plot. Declaration public void SetPlottedColumns(string xColumnName, string yColumnName) Parameters Type Name Description String xColumnName String yColumnName UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) Updates a specified data point based on its linked index attributes, only if it is already within the subset of points that this graph plots. Declaration public override void UpdateDataPoint(int index, LinkedIndices.IndexAttributes indexAttributes) Parameters Type Name Description Int32 index Index of data point that needs to be updated. LinkedIndices.IndexAttributes indexAttributes Current attributes of the data point. Overrides DataPlot.UpdateDataPoint(Int32, LinkedIndices.IndexAttributes) xDropdownUpdated() Callback to update the currently selected x-column index whenever a new selection is made in the x-axis dropdown, and then replot the plot. Declaration protected virtual void xDropdownUpdated() Remarks Relies on the fact that the \"value\" of a dropdown is also the index of that column in the data table. yDropdownUpdated() Callback to update the currently selected y-column index whenever a new selection is made in the y-axis dropdown, and then replot the plot. Declaration protected virtual void yDropdownUpdated() Remarks Relies on the fact that the \"value\" of a dropdown is also the index of that column in the data table."
  },
  "api/IVLab.Plotting.ScatterPlotSkin.html": {
    "href": "api/IVLab.Plotting.ScatterPlotSkin.html",
    "title": "Class ScatterPlotSkin | IVLab 2DPlotting",
    "keywords": "Class ScatterPlotSkin Inheritance Object DataPlotSkin ScatterPlotSkin ClusterPlotSkin Inherited Members DataPlotSkin.plotColor DataPlotSkin.borderColor DataPlotSkin.outlineColor DataPlotSkin.axisLabelTextColor DataPlotSkin.gridlineColor DataPlotSkin.tickMarkColor DataPlotSkin.deleteButtonColor DataPlotSkin.padding DataPlotSkin.scaleAxesToZero DataPlotSkin.defaultColor DataPlotSkin.highlightedColor DataPlotSkin.maskedColor DataPlotSkin.rectSelectionColor DataPlotSkin.rectSelectionOutlineColor DataPlotSkin.brushSelectionColor DataPlotSkin.clickSelectionRadius DataPlotSkin.brushSelectionRadius DataPlotSkin.selectionPadding DataPlotSkin.ApplyOverrideStyling(DataPlotSkin) Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class ScatterPlotSkin : DataPlotSkin Fields pointSize Declaration public float pointSize Field Value Type Description Single"
  },
  "api/IVLab.Plotting.SelectionMode.html": {
    "href": "api/IVLab.Plotting.SelectionMode.html",
    "title": "Class SelectionMode | IVLab 2DPlotting",
    "keywords": "Class SelectionMode Abstract class which declares variables and methods ubiquitous to all possible selection modes. Inheritance Object SelectionMode BrushSelectionMode ClickSelectionMode RectSelectionMode Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class SelectionMode : MonoBehaviour Fields currentDataPlot Data plot the selection is currently acting on. Declaration protected DataPlot currentDataPlot Field Value Type Description DataPlot currentPlotRect Rect transform of the current data plot. Declaration protected RectTransform currentPlotRect Field Value Type Description RectTransform plotsCamera Declaration protected Camera plotsCamera Field Value Type Description Camera Methods EndSelection(Vector2) Finalizes the selection based on mouse position. Declaration public abstract void EndSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). StartSelection(DataPlot, Vector2) Grants the selection a reference to the data plot it is acting on, and begins performing the selection. Declaration public abstract void StartSelection(DataPlot dataPlot, Vector2 mousePosition) Parameters Type Name Description DataPlot dataPlot Data plot the selection is now acting on. Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition). UpdateSelection(Vector2) Updates the selection based on mouse position. Declaration public abstract void UpdateSelection(Vector2 mousePosition) Parameters Type Name Description Vector2 mousePosition Current mouse position in pixel coordinates (as from Input.mousePosition)."
  },
  "api/IVLab.Plotting.SelectionMode.State.html": {
    "href": "api/IVLab.Plotting.SelectionMode.State.html",
    "title": "Enum SelectionMode.State | IVLab 2DPlotting",
    "keywords": "Enum SelectionMode.State Selection states. Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public enum State Fields Name Description End Selection has just ended. Could be used in EndSelection(Vector2) . Start Selection has just started. Could be used in StartSelection(DataPlot, Vector2) . Update Selection is updating. Could be used in UpdateSelection(Vector2) ."
  },
  "api/IVLab.Plotting.SplitViewController.html": {
    "href": "api/IVLab.Plotting.SplitViewController.html",
    "title": "Class SplitViewController | IVLab 2DPlotting",
    "keywords": "Class SplitViewController Basic control over the 2D/3D split camera view. Inheritance Object SplitViewController Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class SplitViewController : MonoBehaviour"
  },
  "api/IVLab.Plotting.TableData.html": {
    "href": "api/IVLab.Plotting.TableData.html",
    "title": "Class TableData | IVLab 2DPlotting",
    "keywords": "Class TableData Column-major order data table that can be initialized from a basic CSV, another data table, or with random data. Inheritance Object TableData ClusterTableData Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class TableData Constructors TableData() Default constructor initializes a data table with 10,000 random data points. Declaration public TableData() TableData(Int32) Initializes a data table with a specified number of random data points. Declaration public TableData(int numDataPoints) Parameters Type Name Description Int32 numDataPoints TableData(Single[], String[], String) Initializes a data table by directly taking a column-major order array of data, along with column header names. Declaration public TableData(float[] data, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [] data Column-major order numeric data in array form. String [] columnNames Name of each column of data given, should be the same length as each data row. String name Name of this data table TableData(Single[], String[], String[], String) Initializes a data table by directly taking a column-major order array of data, along with row and header names. Declaration public TableData(float[] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [] data Column-major order numeric data in array form. String [] rowNames Name of each row of data given, should be the same length as each data column. String [] columnNames Name of each column of data given, should be the same length as each data row. String name TableData(Single[][], String[], String[], String) Initializes a data table by converting a row-major data matrix to a column-major array, setting additional attributes as it does so. Declaration public TableData(float[][] data, string[] rowNames, string[] columnNames, string name = \"foo\") Parameters Type Name Description Single [][] data Row-major order numeric data in matrix form. String [] rowNames Name of each row of data given, should be the same length as each data column. String [] columnNames Name of each column of data given, should be the same length as each data row. String name Name of this data table Remarks Refer to the image at the top of the TableData page for clarification. TableData(String, Boolean) Construct a data table directly from the text of a csv file. Declaration public TableData(string csvText, bool csvHasRowNames = true) Parameters Type Name Description String csvText Boolean csvHasRowNames TableData(String, Boolean, Boolean) Attempts to initialize a data table from the given csv filename, and initializes a random data table instead on failure. Declaration public TableData(string csvFilename, bool csvHasRowNames = true, bool loadFromResources = true) Parameters Type Name Description String csvFilename Name of the csv file, excluding .csv. Boolean csvHasRowNames Boolean loadFromResources Remarks The csv file should be of the following form: Namely, its first column should be made up of data point names/IDs, its first row should be made up of column names, and the rest should be the actual numeric data values that will make up the table. Fields columnByName Declaration protected Dictionary<string, int> columnByName Field Value Type Description Dictionary < String , Int32 > columnMaxes Declaration protected float[] columnMaxes Field Value Type Description Single [] columnMins Declaration protected float[] columnMins Field Value Type Description Single [] columnNames Declaration protected string[] columnNames Field Value Type Description String [] containsNaNs Declaration protected bool containsNaNs Field Value Type Description Boolean data Declaration protected float[] data Field Value Type Description Single [] height Declaration protected int height Field Value Type Description Int32 LINE_SPLIT_RE Declaration protected string LINE_SPLIT_RE Field Value Type Description String name Declaration protected string name Field Value Type Description String rowNames Declaration protected string[] rowNames Field Value Type Description String [] width Declaration protected int width Field Value Type Description Int32 Properties ColumnByName Dictionary mapping column name to column index. Declaration public Dictionary<string, int> ColumnByName { get; } Property Value Type Description Dictionary < String , Int32 > ColumnMaxes Tracks the maximum value in each column. Declaration public float[] ColumnMaxes { get; } Property Value Type Description Single [] ColumnMins Tracks the minimum value in each column. Declaration public float[] ColumnMins { get; } Property Value Type Description Single [] ColumnNames Name of each column in the data table, excluding the first column (which should be the data point / row ID column). Declaration public string[] ColumnNames { get; } Property Value Type Description String [] ContainsNaNs Whether or not any of the data the table contains is NaN. Declaration public bool ContainsNaNs { get; } Property Value Type Description Boolean Height Height of the data table, also the number of rows. Declaration public int Height { get; } Property Value Type Description Int32 Remarks If data table was created from csv, this does not take into account the header row! Item[Int32, Int32] Gets the ij'th element of the data stored in the data table. Declaration public float this[int i, int j] { get; } Parameters Type Name Description Int32 i Row index. Int32 j Column index. Property Value Type Description Single Data value stored at position ij. Name The name of the data table, usually set to be the name of the csv used. Declaration public string Name { get; set; } Property Value Type Description String RowNames Name of each row in the data table, excluding the first row (which should be the header row). Declaration public string[] RowNames { get; } Property Value Type Description String [] Width Width of the data table, also the number of rows. Declaration public int Width { get; } Property Value Type Description Int32 Remarks If data table was created from csv, this does not take into account the first column! Methods ArrayIdx(Int32, Int32) Converts matrix indices (i, j) to single array accessor index. Declaration protected int ArrayIdx(int i, int j) Parameters Type Name Description Int32 i Int32 j Returns Type Description Int32 Data(Int32, Int32) Gets the ij'th element of the data stored in the data table. Declaration public float Data(int i, int j) Parameters Type Name Description Int32 i Row index. Int32 j Column index. Returns Type Description Single Data value stored at position ij. InitializeRandomTable(Int32) Initializes a data table of random size populated with random numeric data. Declaration protected void InitializeRandomTable(int dataPointsCount = 10000) Parameters Type Name Description Int32 dataPointsCount Number of data points to add to the random table. InitializeTableFromCSV(String, Boolean, Boolean) Reads a csv file and loads it into corresponding data table arrays. Declaration protected void InitializeTableFromCSV(string filename, bool csvHasRowNames, bool loadFromResources) Parameters Type Name Description String filename Filename (excluding .csv) of csv file located in Resources folder. Boolean csvHasRowNames Whether or not the first column of the csv is row names. Boolean loadFromResources Remarks This is a modified version of the CSVReader written here: https://bravenewmethod.com/2014/09/13/lightweight-csv-reader-for-unity/ . This expects that the csv has an empty row as its final line. IsEmpty() Whether or not the table is empty. Declaration public virtual bool IsEmpty() Returns Type Description Boolean ProcessCSV(String, Boolean) Declaration protected void ProcessCSV(string csvText, bool csvHasRowNames) Parameters Type Name Description String csvText Boolean csvHasRowNames"
  },
  "api/IVLab.Plotting.TabularDataContainer.html": {
    "href": "api/IVLab.Plotting.TabularDataContainer.html",
    "title": "Class TabularDataContainer | IVLab 2DPlotting",
    "keywords": "Class TabularDataContainer An abstract container for tabular data. Derived classes are tabular data container components which can be attached to GameObjects and then dragged and dropped directly in to a DataPlotGroup via the inspector. Inheritance Object TabularDataContainer TabularDataFromCSVContainer Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public abstract class TabularDataContainer : MonoBehaviour Remarks Must construct data table in awake to ensure that it is initialized by the time a DataPlotGroup uses it. Fields initialized Declaration protected bool initialized Field Value Type Description Boolean tableData Declaration protected TableData tableData Field Value Type Description TableData Properties TableData Declaration public TableData TableData { get; } Property Value Type Description TableData Methods Init() Declaration protected abstract void Init()"
  },
  "api/IVLab.Plotting.TabularDataFromCSVContainer.html": {
    "href": "api/IVLab.Plotting.TabularDataFromCSVContainer.html",
    "title": "Class TabularDataFromCSVContainer | IVLab 2DPlotting",
    "keywords": "Class TabularDataFromCSVContainer Inheritance Object TabularDataContainer TabularDataFromCSVContainer Inherited Members TabularDataContainer.initialized TabularDataContainer.tableData TabularDataContainer.TableData Namespace : IVLab.Plotting Assembly : cs.temp.dll.dll Syntax public class TabularDataFromCSVContainer : TabularDataContainer Methods Init() Declaration protected override void Init() Overrides TabularDataContainer.Init()"
  },
  "index.html": {
    "href": "index.html",
    "title": "2DPlotting-UnityPackage | IVLab 2DPlotting",
    "keywords": "2DPlotting-UnityPackage A Unity package that provides brushing, linking, and filtering functionality between multiple 2D plots and 3D visualizations. Installation in a Unity Project Non-development package use (recommended) In Unity, open Window > Package Manager . Click the + button Select Add package from git URL Paste git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git for the latest package Development use in a non git-managed project Navigate your terminal or Git tool into your non version-controlled Unity project's main folder. Clone this repository into the Assets folder: cd Packages; git clone git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git Development use in a git-managed project Navigate your terminal or Git tool into your version-controlled Unity project's main folder. Add this repository as a submodule: cd Packages; git submodule add git@github.umn.edu:ivlab-cs/2DPlotting-UnityPackage.git; git submodule update --init --recursive See https://git-scm.com/book/en/v2/Git-Tools-Submodules for more details on working with Submodules. Updating the Package If you already have the package installed and want to update to the most recent version: For a non-development package: Navigate to your Unity project's Packages folder using a file explorer or terminal. Delete the \"packages-lock\" file. Return to your Unity project and wait for it to automatically reload/update all of your packages. A non-development package can also be updated by simply reperforming the non-development package use instructions above. For a development package: Navigate to the directory in which you have cloned the package. Perform a git pull for the latest release. Getting Started Setup This packages relies on TextMeshPro to display text. If you have not yet imported TextMeshPro, please navigate to Window > TextMeshPro > Import TMP Essential Resources in your Unity project and select Import before using this package. If you forget to do this, the TMP Importer window should appear when you create your first plot, in which case simply be sure to click the Import TMP Essentials button. Creating Your First Plots Navigate to Packages/IVLab 2DPlotting/Runtime/Prefabs/Plotting Setups/Simple and drag the Complete Plotting Setup (Simple) prefab into an empty scene (make sure the scene is truly empty). Click play and use the UI to create your plots! Maximizing the game view window is also recommended. 2D/3D Visualization This package readily supports linking between the 2D plots and any related 3D visualization of the data. For context on how this can be achieved, it's recommended that you import the sample scene provided with this package. To do so, navigate back to Window > Package Manager in your Unity project, select IVLab 2DPlotting from the list of packages, and then under the Samples dropdown in the package description window click the Import button next to the sample titled \"2D/3D Vis Example.\" There should now be a folder by the name of Samples inside of Assets , which should have a subfolder (potentially a few levels down) titled 2D_3D Vis Example , which should itself contain a Scenes folder. Open up the scene titled ExampleScene in this folder and you should be good-to-go to experiment with a sample 2D/3D visualization. Feel free to explore this and manipulate GameObjects and scripts as you wish. To get started doing this for you own specific 2D/3D visualization, locate the Linked Indices GameObject in your scene. This object's LinkedIndices component has three publicly visible events that can be listened to: OnIndexAttributeChanged(Int32, IndexAttributes) : Listen to this event to be able to perform an action for each index that had an attribute change. OnAnyIndexAttributeChanged() : Listen to this event to be able to perform an action when any index attribute changes. OnIndicesReinitialized() : Listen to this event to be able to perform an action when the linked indices are reinitialized. Add a method as a listener to any of these event either through the Unity inspector or through script, and take it away from there! Table Data There are many ways to use your own tabular data source to create plots with this package. Assuming you have already dragged a Complete Plotting Setup prefab into your scene, the options are as follows: Option #1 - Use the built-in CSV reader The built-in CSV reader provides the simplest and most direct way to load in data that is already in a tabular format. To begin, simply locate the Tabular Data Source GameObject in the inspector. The TabularDataFromCSVContainer script attached to this GameObject has a number of inspector visible fields that allow you to load in a CSV of your own: Load From Resources - Toggle this to indicate whether to load the csv from the \"Resources\" folder, or from its full path name. Csv Filename - Change this to the name (excluding \".csv\") of any csv file in your project's Assets/Resources folder (create this folder if it does not exist). This script will construct a data table from the csv with the given name, and then use it to power the data plots. (Note: There are already some example csv files in this package's Runtime/Resources folder. To use one of them, simply input its name into this field, e.g. \"cars\"). Csv Full Path Name - If you have decided not to load a csv from resources, instead change this field to the full path name of a csv file anywhere on your computer. Csv Has Row Names - Check this box if the csv you are loading has row names in its first column. If the csv's first column consists of data, uncheck this box. Csv Data Is Clustered - Check this box if the data in the csv is clustered. Cluster Color Gradient - Alter this gradient to alter the colors used for each cluster. Option #2 - Use a tabular data container Building your own \"Tabular Data Container\" gives you more control over how your tabular data is constructed, while simultaneously allowing you to interact with it in the inspector. To take this approach, start by creating a custom class that inherits from TabularDataContainer and overrides its Init() method. Build your TableData object within this method however you please, being sure to set the initialized flag to true somewhere along the way. public class CustomTabularDataContainer : TabularDataContainer { protected override void Init() { // Initialize an array of the data in column-major order float[] data = . . . // Save the column names string[] columnNames = . . . // Initialize a new table data and assign it to this class' tableData field tableData = new TableData(data, columnNames); // Set initialized flag to true initialized = true; } } Now that you have your own tabular data container built, add it as a component to the GameObject in your scene that you want to act as your tabular data source for this data. Finally, drag that GameObject into the Tabular Data Container field of the Data Plot Group in the inspector. Option #3 - Use scripting If you're not in the mood for Unity shenanigans, an alternative is to create and apply your tabular data entirely through script by following a process like so: Create a new MonoBehaviour script that has a reference to the Data Plot Group 's DataPlotGroup script (e.g. at the top of this script define something like [SerializeField] private DataPlotGroup dataPlotGroup; and attach the Data Plot Group object to it via the inspector). At some point in this MonoBehaviour (likely the Start() or Awake() method) initialize your data in whatever way suits your needs (e.g. using your own csv reader, by means of an sql data table, taking data straight from other GameObjects in your Unity scene, etc.). Format this data in such a way that one of the TableData constructor methods will be able to parse it (as suggested in the documentation, refer to the image at the top of the page for clarification). Create the TableData and assign it to the DataPlotGroup . This may look something like: // Initialize a matrix of the data in row-major order float[][] data = . . . // Save the row and column names string[] rowNames = . . . string[] columnNames = . . . // Initialize a new table data using the \"row-major-order matrix data\" constructor TableData tableData = new TableData(data, rowNames, columnNames); // Set this TableData as the table used by the DataPlotGroup dataPlotGroup.TableData = tableData; After dataPlotGroup.TableData = tableData; has been called, the DataPlotGroup will automatically update any plots it manages to use this new data table, which means you should be all set from here! Plot Styling To make a custom stylesheet asset (aka skin), navigate to Assets > Create > Plotting and select the type of stylesheet you would like to create. Edit the created stylesheet asset, and apply it by dragging it into the the inspector for the DataPlotGroup or any of the specific Plot Setups it has reference to."
  }
}